{"version":3,"sources":["utils/wallet.js","utils/ceramic.js","utils/identity.js","utils/threadDB.js","lib/threadDB.js","assets/logo/Group 19@3x.png","components/Home/Home.jsx","utils/markup-parser.js","components/Write/Write.jsx","components/MyContract/MyContract.jsx","components/WriterContract/WriterContract.jsx","components/Read/Read.jsx","components/AccessControl/AccessControl.jsx","App.js","index.js","utils/socket-io.js","lib/lit.js"],"names":["web3Modal","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","process","theme","connectWallet","a","connect","provider","injectedProvider","ethers","providers","Web3Provider","signer","getSigner","getAddress","address","Number","utils","getBalance","formatEther","balance","getChainId","chainID","console","log","Error","message","disconectWallet","walletDisconnected","threadDBDisconnected","litDisconnected","JSON","parse","localStorage","getItem","removeItem","clearCachedProvider","threeID","ThreeIdConnect","connectCeramic","authProvider","EthereumAuthProvider","ceramic","CeramicClient","did","DID","getDidProvider","resolver","get3IDResolver","getKeyResolver","authenticate","store","DIDDataStore","model","modelAliases","get","basicProfile","ceramicClient","_id","getIdentity","signMessage","signedText","hash","keccak256","seed","replace","match","map","hexNoPrefix","BigNumber","from","toNumber","identity","PrivateKey","fromRawEd25519Seed","Uint8Array","connectThreadDB","getThreadDBCredentials","credentials","threadDBClient","threadID","solveChallenge","setItem","stringify","Client","withUserAuth","userAuth","client","ThreadID","fromBytes","Date","userAuthExpiration","getTime","now","registerUser","userData","deployedContractAddress","subscribedBy","subscribedTo","query","Where","eq","find","length","create","getUserByDID","user","getUserByAddress","getUsers","users","setUserDeployedContractAddress","save","addSubscriber","subscriberDID","writerQuery","writer","writerData","includes","push","subscriberQuery","subscriber","subscriberData","removeSubscriber","filter","writerDID","Home","wallet","handleRerender","handleMessage","useModal","setVisible","bindings","useState","name","setName","description","setDescription","emoji","setEmoji","updateProfileBtnLoading","setUpdateProfileBtnLoading","updateBasicProfile","set","renderUpdateBasicProfileModal","width","className","clearable","label","value","onChange","e","target","type","shadow","loading","scale","onClick","useEffect","undefined","title","content","string","bg","size","b","symbol","text","copy","marginTop","marginBottom","auto","convertCleanDataToHTML","blocks","convertedHtml","block","data","level","h1","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","id","h2","h3","h4","h5","h6","convertToDate","epoch","toDateString","Write","authSig","setToast","useToasts","placement","padding","userHasDeployed","setUserHasDeployed","userAccessControlConditions","setUserAccessControlConditions","setUserEncryptedSymmetricKey","setUserEncryptedPosts","userDecryptedPosts","setUserDecryptedPosts","userHasSetAccessControlConditions","setUserHasSetAccessControlConditions","editorIsOpen","setEditorIsOpen","selectedPostToEditID","setSelectedPostToEditID","publishBtnLoading","setPublishBtnLoading","editorJS","useRef","initializeEditor","editorType","prevContent","editor","EditorJS","holder","logLevel","onReady","current","saver","window","autofocus","tools","header","class","Header","inlineToolbar","paragraph","Paragraph","config","placeholder","delimiter","Delimiter","marker","Marker","openEditor","draft","closeEditor","clearEditor","clear","handleEdit","post","publishPost","postType","finalDraft","newPosts","newPost","editedPost","postToEdit","postToEditIndex","indexOf","encryptPostsWithLit","encryptedPosts","encryptedSymmetricKey","encryptedPostsBlobToBase64","encryptedPostsBase64","merge","deletePost","postToDelete","getHasWriterDeployed","accessControlConditions","minTokenCount","returnValueTest","encryptedPostsBlob","encryptedPostsBase64ToBlob","decryptPostsWithLit","decryptedPosts","init","destroy","Group","ghost","marginRight","paddingBottom","Content","Footer","i","time","color","actions","handler","deletePostHandler","prevContentPost","prevContentPostIndex","resetEditor","MyContract","tokenName","setTokenName","tokenSymbol","setTokenSymbol","tokenPrice","setTokenPrice","initialMint","setInitialMinit","deploymentFee","setDeploymentFee","writerERC20","setWriterERC20","userDeployedContractAddress","userTokenName","setUserTokenName","userTokenSymbol","setUserTokenSymbol","userTokenPrice","setUserTokenPrice","userTokenTotalMinted","setUserTokenTotalMinted","userTokenContractBalance","setUserTokenContractBalance","userTokenBalance","setUserTokenBalance","newMint","setNewMint","transferAddress","setTransferAddress","transferAmount","setTransferAmount","newTokenPrice","setNewTokenPrice","deployBtnLoading","setDeployBtnLoading","mintBtnLoading","setMintBtnLoading","transferBtnLoading","setTransferBtnLoading","changePriceBtnLoading","setChangePriceBtnLoading","withdrawBtnLoading","setWithdrawBtnLoading","deployWriterERC20Contract","parseEther","txn","wait","status","mintNewTokens","getTokenPrice","mintPrice","String","mint","balanceOf","loggedInUserBalanceOfWriterToken","writerRequiredNoOfTokensToAccess","transferTokens","isAddress","transfer","transferToUserBalanceOfWriterToken","transferToUser","changeTokenPrice","withdrawBalance","getDeploymentFee","getWriterDeployedContractAddress","Contract","contractABI","totalSupply","getContractBalance","href","icon","style","fontWeight","h","readOnly","WriterContract","writerContractAddress","setWriterContractAddress","ownerAddress","setOwnerAddress","ownerDID","setOwnerDID","ownerBasicProfile","setOwnerBasicProfile","userIsOwner","setUserIsOwner","contractBalance","setContractBalance","getterAddress","setGetterAddress","newDeploymentFee","setNewDeploymentFee","setDeployedContractAddress","getAddressBtnLoading","setGetAddressBtnLoading","changeDeploymentFeeBtnLoading","setChangeDeploymentFeeBtnLoading","getDeployedContractAddress","changeDeploymentFee","owner","margin","onClearClick","Read","allWriters","setAllWriters","subscribedToWriters","setSubscribedToWriters","setMyWriting","mySubscribers","setMySubscribers","showWritersPage","setShowWritersPage","showProfilePage","setShowProfilePage","showContractPage","setShowContractPage","showReadPage","setShowReadPage","currentProfile","setCurrentProfile","currentProfileDecryptedPosts","setCurrentProfileDecryptedPosts","currentField","setCurrentField","loggedInUserIsAWriter","setLoggedInUserIsAWriter","showInfo","setShowInfo","postsLoading","setPostsLoading","handleShowWritersPage","handleShowProfilePage","handleShowContractPage","handleShowReadPage","readBlog","writerDecryptedPosts","alert","renderWriters","writersArray","backgroundColor","Item","Anchor","totalSubscribedBy","loggedInUserIsSubscribed","contractAddress","writerUsers","constants","AddressZero","Promise","all","writerUser","updatedWriterUser","totalSubscribedTo","myWriting","paddingRight","AccessControl","setMinTokenCount","newMinTokenCount","setNewMinTokenCount","minTokenCountBtnLoading","setMinTokenCountBtnLoading","setMinNoOfTokensCount","unifiedAccessControlConditions","standardContractType","chain","method","parameters","comparator","operator","App","delay","setWallet","walletConnected","setWalletConnected","setCeramic","ceramicConnected","setCeramicConnected","threadDBConnected","setThreadDBConnected","setUser","setUsers","setWriter","setAuthSig","litConnected","setLitConnected","rerender","setRerender","cachedProvider","useCallback","LitJsSdk","LitNodeClient","alertWhenUnauthorized","litNodeClient","checkAndSignAuthMessage","src","logo","alt","initialValue","hideDivider","align","spaceRatio","ethereum","on","setTimeout","location","reload","accounts","ReactDOM","createRoot","document","getElementById","render","io","require","resolve","reject","socket","publicKey","public","toString","emit","responseData","challenge","Buffer","sign","signature","disconnect","_","reader","FileReader","onloadend","result","readAsDataURL","encryptedPostsBase64String","base64String","encryptedPostsUint8Array","Blob","posts","encryptString","encryptedString","symmetricKey","saveEncryptionKey","uint8arrayToString","getEncryptionKey","toDecrypt","decryptString","errorCode"],"mappings":"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","file":"static/js/main.5ca6eabf.chunk.js","sourcesContent":["import Web3Modal from 'web3modal';\nimport WalletConnectProvider from '@walletconnect/web3-provider';\nimport { ethers } from 'ethers';\n\nexport const web3Modal = new Web3Modal({\n  cacheProvider: true,\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider,\n      options: {\n        infuraId: process.env.REACT_APP_INFURA_API_KEY,\n      },\n    },\n  },\n  theme: 'dark',\n});\n\nexport const connectWallet = async () => {\n  try {\n    const provider = await web3Modal.connect();\n    const injectedProvider = new ethers.providers.Web3Provider(provider);\n    const signer = injectedProvider.getSigner();\n    const address = await signer.getAddress();\n    const balance = Number(ethers.utils.formatEther(await signer.getBalance()));\n    const chainID = await signer.getChainId();\n\n    return { provider, injectedProvider, signer, address, balance, chainID };\n  } catch (e) {\n    console.log(e);\n\n    throw new Error(e.message);\n  }\n};\n\nexport const disconectWallet = async () => {\n  let walletDisconnected = false,\n    threadDBDisconnected = false,\n    litDisconnected = false;\n\n  const credentials = JSON.parse(localStorage.getItem('payload'));\n\n  if (credentials !== null) {\n    localStorage.removeItem('payload');\n\n    threadDBDisconnected = true;\n  }\n\n  const litAuthSignature = JSON.parse(localStorage.getItem('lit-auth-signature'));\n\n  if (litAuthSignature !== null) {\n    localStorage.removeItem('lit-auth-signature');\n\n    litDisconnected = true;\n  }\n\n  await web3Modal.clearCachedProvider();\n\n  walletDisconnected = true;\n\n  return { threadDBDisconnected, litDisconnected, walletDisconnected };\n};\n","import { CeramicClient } from '@ceramicnetwork/http-client';\nimport { IDX } from '@ceramicstudio/idx';\nimport { DID } from 'dids';\nimport { getResolver as getKeyResolver } from 'key-did-resolver';\nimport { getResolver as get3IDResolver } from '@ceramicnetwork/3id-did-resolver';\nimport { EthereumAuthProvider, ThreeIdConnect } from '@3id/connect';\nimport { DIDDataStore } from '@glazed/did-datastore';\nimport modelAliases from '../model/model.json';\n\nconst threeID = new ThreeIdConnect();\n\nexport const connectCeramic = async (provider, address) => {\n  try {\n    const authProvider = new EthereumAuthProvider(provider, address);\n    await threeID.connect(authProvider);\n    const ceramic = new CeramicClient(process.env.REACT_APP_CERAMIC_URL);\n    const did = new DID({\n      provider: threeID.getDidProvider(),\n      resolver: {\n        ...get3IDResolver(ceramic),\n        ...getKeyResolver(),\n      },\n    });\n    await did.authenticate();\n    ceramic.did = did;\n\n    // USING IDX\n    // const idx = new IDX({ ceramic });\n    // const basicProfile = await idx.get('basicProfile');\n    // USING IDX\n\n    // USING DID Datastore\n    const store = new DIDDataStore({ ceramic, model: modelAliases });\n    const basicProfile = await store.get('basicProfile');\n    // USING DID Datastore\n\n    return {\n      ceramicClient: ceramic,\n      did: did._id,\n      store,\n      basicProfile,\n    };\n  } catch (e) {\n    console.log(e);\n\n    throw new Error(e.message);\n  }\n};\n","import { PrivateKey } from '@textile/hub';\nimport { ethers } from 'ethers';\n\nconst generateMessageForEntropy = (ethereumAddress, applicationName) => {\n  return (\n    'Welcome to 0xWriter! \\n' +\n    '\\n' +\n    'The Ethereum address used by this application is: \\n' +\n    ethereumAddress +\n    '\\n' +\n    '\\n' +\n    'By signing this message, you authorize the current application to use the following app associated with the above address: \\n' +\n    applicationName +\n    '\\n' +\n    '\\n' +\n    'Your authentication status will be reset after 2 hours.'\n  );\n};\n\nexport const getIdentity = async (signer, address) => {\n  try {\n    let signedText;\n\n    const message = generateMessageForEntropy(address, '0xWriter');\n\n    signedText = await signer.signMessage(message);\n\n    const hash = ethers.utils.keccak256(signedText);\n\n    const seed = hash\n      .replace('0x', '')\n      .match(/.{2}/g)\n      .map((hexNoPrefix) => ethers.BigNumber.from('0x' + hexNoPrefix).toNumber());\n\n    const identity = PrivateKey.fromRawEd25519Seed(Uint8Array.from(seed));\n\n    return identity;\n  } catch (e) {\n    console.log(e);\n\n    throw new Error(e.message);\n  }\n};\n","import { Client, ThreadID } from '@textile/hub';\nimport { solveChallenge } from './socket-io';\nimport { getIdentity } from './identity';\n\nexport const connectThreadDB = async (signer, address) => {\n  try {\n    const credentials = await getThreadDBCredentials();\n\n    if (credentials) {\n      const { threadDBClient, threadID } = credentials;\n\n      return { threadDBClient, threadID };\n    } else {\n      const identity = await getIdentity(signer, address);\n\n      if (!identity) {\n        throw Error('User identity is missing!');\n      }\n\n      const credentials = await solveChallenge(identity);\n      localStorage.setItem('payload', JSON.stringify(credentials));\n      const client = await Client.withUserAuth(credentials.userAuth);\n      const threadID = Uint8Array.from(credentials.threadID);\n\n      return {\n        threadDBClient: client,\n        threadID: ThreadID.fromBytes(threadID),\n      };\n    }\n  } catch (e) {\n    console.log(e);\n\n    throw new Error(e.message);\n  }\n};\n\nexport const getThreadDBCredentials = async () => {\n  const credentials = JSON.parse(localStorage.getItem('payload'));\n\n  if (credentials !== null) {\n    const expiration = new Date(credentials.userAuthExpiration).getTime();\n\n    if (expiration > Date.now()) {\n      const client = Client.withUserAuth(credentials.userAuth);\n\n      const threadID = Uint8Array.from(credentials.threadID);\n\n      return {\n        threadDBClient: client,\n        threadID: ThreadID.fromBytes(threadID),\n      };\n    } else {\n      throw new Error('Textile Auth Expired!');\n    }\n  } else {\n    return false;\n  }\n};\n","import { Where } from '@textile/hub';\nimport { getThreadDBCredentials } from '../utils/threadDB.js';\n\nexport const registerUser = async (address, did) => {\n  try {\n    const credentials = await getThreadDBCredentials();\n\n    if (credentials) {\n      const { threadDBClient, threadID } = credentials;\n\n      const userData = {\n        address,\n        did,\n        deployedContractAddress: '',\n        subscribedBy: [],\n        subscribedTo: [],\n      };\n\n      const query = new Where('did').eq(did);\n\n      const user = await threadDBClient.find(threadID, 'Users', query);\n\n      if (user.length < 1) {\n        await threadDBClient.create(threadID, 'Users', [userData]);\n      }\n    } else {\n      throw new Error('ThreadDB credentials not found! Reconnect your wallet.');\n    }\n  } catch (e) {\n    console.log(e);\n\n    throw new Error(e.message);\n  }\n};\n\nexport const getUserByDID = async (did) => {\n  try {\n    const credentials = await getThreadDBCredentials();\n\n    if (credentials) {\n      const { threadDBClient, threadID } = credentials;\n\n      const query = new Where('did').eq(did);\n\n      const user = await threadDBClient.find(threadID, 'Users', query);\n\n      return user[0];\n    } else {\n      throw new Error('ThreadDB credentials not found! Reconnect your wallet.');\n    }\n  } catch (e) {\n    console.log(e);\n\n    throw new Error(e.message);\n  }\n};\n\nexport const getUserByAddress = async (address) => {\n  try {\n    const credentials = await getThreadDBCredentials();\n\n    if (credentials) {\n      const { threadDBClient, threadID } = credentials;\n\n      const query = new Where('address').eq(address);\n\n      const user = await threadDBClient.find(threadID, 'Users', query);\n\n      return user[0];\n    } else {\n      throw new Error('ThreadDB credentials not found! Reconnect your wallet.');\n    }\n  } catch (e) {\n    console.log(e);\n\n    throw new Error(e.message);\n  }\n};\n\nexport const getUsers = async () => {\n  try {\n    const credentials = await getThreadDBCredentials();\n\n    if (credentials) {\n      const { threadDBClient, threadID } = credentials;\n\n      const users = await threadDBClient.find(threadID, 'Users', {});\n\n      return users;\n    } else {\n      throw new Error('ThreadDB credentials not found! Reconnect your wallet.');\n    }\n  } catch (e) {\n    console.log(e);\n\n    throw new Error(e.message);\n  }\n};\n\nexport const setUserDeployedContractAddress = async (did, deployedContractAddress) => {\n  try {\n    const credentials = await getThreadDBCredentials();\n\n    if (credentials) {\n      const { threadDBClient, threadID } = credentials;\n\n      const query = new Where('did').eq(did);\n\n      const user = await threadDBClient.find(threadID, 'Users', query);\n\n      if (user.length < 1) return;\n\n      let userData = user[0];\n\n      if (userData.deployedContractAddress === deployedContractAddress) return;\n\n      userData.deployedContractAddress = deployedContractAddress;\n\n      return await threadDBClient.save(threadID, 'Users', [userData]);\n    } else {\n      throw new Error('ThreadDB credentials not found! Reconnect your wallet.');\n    }\n  } catch (e) {\n    console.log(e);\n\n    throw new Error(e.message);\n  }\n};\n\nexport const addSubscriber = async (did, subscriberDID) => {\n  try {\n    if (did === subscriberDID) return;\n\n    const credentials = await getThreadDBCredentials();\n\n    if (credentials) {\n      const { threadDBClient, threadID } = credentials;\n\n      const writerQuery = new Where('did').eq(did);\n      const writer = await threadDBClient.find(threadID, 'Users', writerQuery);\n      if (writer.length < 1) return;\n      let writerData = writer[0];\n      if (writerData.subscribedBy.includes(subscriberDID) === true) return;\n      writerData.subscribedBy.push(subscriberDID);\n      await threadDBClient.save(threadID, 'Users', [writerData]);\n\n      const subscriberQuery = new Where('did').eq(subscriberDID);\n      const subscriber = await threadDBClient.find(threadID, 'Users', subscriberQuery);\n      if (subscriber.length < 1) return;\n      let subscriberData = subscriber[0];\n      if (subscriberData.subscribedTo.includes(did) === true) return;\n      subscriberData.subscribedTo.push(did);\n      return await threadDBClient.save(threadID, 'Users', [subscriberData]);\n    } else {\n      throw new Error('ThreadDB credentials not found! Reconnect your wallet.');\n    }\n  } catch (e) {\n    console.log(e);\n\n    throw new Error(e.message);\n  }\n};\n\nexport const removeSubscriber = async (did, subscriberDID) => {\n  try {\n    const credentials = await getThreadDBCredentials();\n\n    if (credentials) {\n      const { threadDBClient, threadID } = credentials;\n\n      const writerQuery = new Where('did').eq(did);\n      const writer = await threadDBClient.find(threadID, 'Users', writerQuery);\n      if (writer.length < 1) return;\n      let writerData = writer[0];\n      if (writerData.subscribedBy.includes(subscriberDID) === false) return;\n      writerData.subscribedBy = writerData.subscribedBy.filter((did) => did !== subscriberDID);\n      await threadDBClient.save(threadID, 'Users', [writerData]);\n\n      const subscriberQuery = new Where('did').eq(subscriberDID);\n      const subscriber = await threadDBClient.find(threadID, 'Users', subscriberQuery);\n      if (subscriber.length < 1) return;\n      let subscriberData = subscriber[0];\n      if (subscriberData.subscribedTo.includes(did) === false) return;\n      subscriberData.subscribedTo = subscriberData.subscribedTo.filter((writerDID) => writerDID !== did);\n      return await threadDBClient.save(threadID, 'Users', [subscriberData]);\n    } else {\n      throw new Error('ThreadDB credentials not found! Reconnect your wallet.');\n    }\n  } catch (e) {\n    console.log(e);\n\n    throw new Error(e.message);\n  }\n};\n","export default __webpack_public_path__ + \"static/media/Group 19@3x.0d91ea83.png\";","import { useState, useEffect } from 'react';\nimport Identicon from 'react-identicons';\nimport './style.css';\nimport { Button, Text, Card, Note, Tag, Description, Modal, useModal, Input, Snippet } from '@geist-ui/core';\n\nexport const Home = ({ wallet, ceramic, handleRerender, handleMessage }) => {\n  const { setVisible, bindings } = useModal();\n  const [name, setName] = useState();\n  const [description, setDescription] = useState();\n  const [emoji, setEmoji] = useState();\n  const [updateProfileBtnLoading, setUpdateProfileBtnLoading] = useState(false);\n\n  const updateBasicProfile = async () => {\n    try {\n      if (!name) {\n        handleMessage('warning', 'Please enter name.');\n      } else if (!description) {\n        handleMessage('warning', 'Please enter description.');\n      } else if (!emoji) {\n        handleMessage('warning', 'Please enter emoji.');\n      } else {\n        setUpdateProfileBtnLoading(true);\n\n        await ceramic.store.set('basicProfile', {\n          name,\n          description,\n          emoji,\n        });\n\n        setUpdateProfileBtnLoading(false);\n        handleMessage('success', 'Basic Profile successfully updated.');\n\n        setName('');\n        setDescription('');\n        setEmoji('');\n\n        setVisible(false);\n\n        handleRerender(true);\n      }\n    } catch (e) {\n      console.log(e);\n\n      setUpdateProfileBtnLoading(false);\n      handleMessage('error', e.message);\n    }\n  };\n\n  const renderUpdateBasicProfileModal = () => {\n    return (\n      <Modal {...bindings} width='360px'>\n        <div className='modal-content'>\n          <Input clearable label='Name' value={name} onChange={(e) => setName(e.target.value)} width='100%' />\n          <Input\n            clearable\n            label='Description'\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            width='100%'\n          />\n          <Input clearable label='Emoji' value={emoji} onChange={(e) => setEmoji(e.target.value)} width='100%' />\n          {updateProfileBtnLoading ? (\n            <Button type='secondary' shadow loading scale={0.8} width='100%'>\n              Update Profile\n            </Button>\n          ) : (\n            <Button type='secondary' shadow scale={0.8} width='100%' onClick={updateBasicProfile}>\n              Update Profile\n            </Button>\n          )}\n        </div>\n      </Modal>\n    );\n  };\n\n  useEffect(() => {\n    function init() {\n      if (ceramic.basicProfile !== undefined && ceramic.basicProfile !== null) {\n        setName(ceramic.basicProfile.name);\n        setDescription(ceramic.basicProfile.description);\n        setEmoji(ceramic.basicProfile.emoji);\n      }\n    }\n    init();\n  }, []);\n\n  return (\n    <div className='home-content'>\n      <Description\n        title='User'\n        content={\n          <Card shadow width='fit-content'>\n            <div className='user'>\n              <div className='user-identicon-profile'>\n                <div className='user-identicon'>\n                  <Identicon string={wallet.address} bg='#eef' size='40' />\n                </div>\n                {ceramic.basicProfile !== undefined ? (\n                  <div className='user-basic-profile'>\n                    <div className='user-name'>\n                      {ceramic.basicProfile !== null && ceramic.basicProfile.name ? (\n                        <Text b>{ceramic.basicProfile.name}</Text>\n                      ) : (\n                        <Text>--</Text>\n                      )}\n                    </div>\n                    <div className='user-description'>\n                      <Text>\n                        {ceramic.basicProfile !== null && ceramic.basicProfile.description\n                          ? ceramic.basicProfile.description\n                          : '--'}\n                      </Text>\n                    </div>\n                    <div className='user-emoji'>\n                      <Text>\n                        {ceramic.basicProfile !== null && ceramic.basicProfile.emoji\n                          ? ceramic.basicProfile.emoji\n                          : '--'}\n                      </Text>\n                    </div>\n                  </div>\n                ) : null}\n              </div>\n              <div className='user-address-did'>\n                <div className='user-did'>\n                  <Snippet symbol='DID' text={ceramic.did} width='400px' copy='prevent' />\n                </div>\n                <div className='user-address'>\n                  <Snippet type='lite' symbol='Address' text={wallet.address} width='400px' />\n                </div>\n              </div>\n            </div>\n          </Card>\n        }\n      />\n      <Description title='Balance' content={`${wallet.balance} MATIC`} />\n      <Description title='Network' content={<Tag type='lite'>Mumbai Testnet</Tag>} />\n      {(ceramic.basicProfile !== undefined && ceramic.basicProfile === null) ||\n      (ceramic.basicProfile !== undefined &&\n        ceramic.basicProfile !== null &&\n        (ceramic.basicProfile.name === undefined || ceramic.basicProfile.name === '') &&\n        (ceramic.basicProfile.description === undefined || ceramic.basicProfile.description === '') &&\n        (ceramic.basicProfile.emoji === undefined || ceramic.basicProfile.emoji === '')) ? (\n        <div className='profile-not-found'>\n          <Note width='fit-content' marginTop='0' marginBottom='1' label='Note '>\n            Basic Profile not found, update now.\n          </Note>\n          <Button type='secondary' shadow scale={0.8} auto onClick={() => setVisible(true)}>\n            Update Profile\n          </Button>\n          {renderUpdateBasicProfileModal()}\n        </div>\n      ) : (\n        <>\n          <Button type='secondary' shadow scale={0.8} className='update-profile-btn' onClick={() => setVisible(true)}>\n            Update Profile\n          </Button>\n          {renderUpdateBasicProfileModal()}\n        </>\n      )}\n    </div>\n  );\n};\n","import DOMPurify from 'dompurify';\nimport { Text } from '@geist-ui/core';\n\nexport const convertCleanDataToHTML = (blocks) => {\n  var convertedHtml = [];\n  blocks.map((block) => {\n    switch (block.type) {\n      case 'header':\n        switch (block.data.level) {\n          case 1:\n            convertedHtml.push(\n              <Text key={block.id} h1>\n                <span\n                  dangerouslySetInnerHTML={{\n                    __html: DOMPurify.sanitize(block.data.text),\n                  }}\n                ></span>\n              </Text>\n            );\n            break;\n          case 2:\n            convertedHtml.push(\n              <Text key={block.id} h2>\n                <span\n                  dangerouslySetInnerHTML={{\n                    __html: DOMPurify.sanitize(block.data.text),\n                  }}\n                ></span>\n              </Text>\n            );\n            break;\n          case 3:\n            convertedHtml.push(\n              <Text key={block.id} h3>\n                <span\n                  dangerouslySetInnerHTML={{\n                    __html: DOMPurify.sanitize(block.data.text),\n                  }}\n                ></span>\n              </Text>\n            );\n            break;\n          case 4:\n            convertedHtml.push(\n              <Text key={block.id} h4>\n                <span\n                  dangerouslySetInnerHTML={{\n                    __html: DOMPurify.sanitize(block.data.text),\n                  }}\n                ></span>\n              </Text>\n            );\n            break;\n          case 5:\n            convertedHtml.push(\n              <Text key={block.id} h5>\n                <span\n                  dangerouslySetInnerHTML={{\n                    __html: DOMPurify.sanitize(block.data.text),\n                  }}\n                ></span>\n              </Text>\n            );\n            break;\n          case 6:\n            convertedHtml.push(\n              <Text key={block.id} h6>\n                <span\n                  dangerouslySetInnerHTML={{\n                    __html: DOMPurify.sanitize(block.data.text),\n                  }}\n                ></span>\n              </Text>\n            );\n            break;\n          default:\n            break;\n        }\n        break;\n      case 'paragraph':\n        convertedHtml.push(\n          <Text key={block.id}>\n            <span\n              dangerouslySetInnerHTML={{\n                __html: DOMPurify.sanitize(block.data.text),\n              }}\n            ></span>\n          </Text>\n        );\n        break;\n      case 'delimiter':\n        convertedHtml.push(<div key={block.id} className='ce-delimiter'></div>);\n        break;\n      default:\n        console.log('Unknown block type', block.type);\n        break;\n    }\n  });\n  return convertedHtml;\n};\n\nexport const convertToDate = (epoch) => {\n  const date = new Date(epoch);\n  return date.toDateString();\n};\n","import { useState, useEffect, useRef } from 'react';\nimport EditorJS from '@editorjs/editorjs';\nimport Header from '@editorjs/header';\nimport Delimiter from '@editorjs/delimiter';\nimport Marker from '@editorjs/marker';\nimport Paragraph from '@editorjs/paragraph';\nimport {\n  encryptedPostsBlobToBase64,\n  encryptedPostsBase64ToBlob,\n  encryptPostsWithLit,\n  decryptPostsWithLit,\n} from '../../lib/lit';\nimport { convertCleanDataToHTML, convertToDate } from '../../utils/markup-parser';\nimport './style.css';\nimport { Button, Card, Note, Text, Fieldset, useToasts } from '@geist-ui/core';\nimport { ChevronsRight, ChevronsDown, Edit, Trash } from '@geist-ui/icons';\n\nexport const Write = ({ wallet, ceramic, writer, authSig, handleRerender, handleMessage }) => {\n  const { setToast } = useToasts({ placement: 'bottomRight', padding: '1rem' });\n  const [userHasDeployed, setUserHasDeployed] = useState(false);\n  const [userAccessControlConditions, setUserAccessControlConditions] = useState();\n  const [userEncryptedSymmetricKey, setUserEncryptedSymmetricKey] = useState();\n  const [userEncryptedPosts, setUserEncryptedPosts] = useState();\n  const [userDecryptedPosts, setUserDecryptedPosts] = useState([]);\n  const [userHasSetAccessControlConditions, setUserHasSetAccessControlConditions] = useState(false);\n  const [editorIsOpen, setEditorIsOpen] = useState(false);\n  const [selectedPostToEditID, setSelectedPostToEditID] = useState();\n  const [publishBtnLoading, setPublishBtnLoading] = useState(false);\n\n  const editorJS = useRef();\n\n  const initializeEditor = (editorType, prevContent) => {\n    const editor = new EditorJS({\n      holder: editorType === 'new' ? 'newEditor' : editorType === 'edit' ? 'editEditor' : 'editorjs',\n      logLevel: 'ERROR',\n      data: prevContent && prevContent.data !== undefined ? prevContent.data : prevContent,\n      onReady: () => {\n        editorJS.current = editor;\n      },\n      onChange: async () => {\n        let content = await editor.saver.save();\n        console.log(content);\n        if (editorType === 'new') {\n          window.localStorage.setItem(`editorDraft-new-${wallet.address}`, JSON.stringify(content));\n        } else if (editorType === 'edit') {\n          window.localStorage.setItem(`editorDraft-${prevContent.id}-${wallet.address}`, JSON.stringify(content));\n        }\n      },\n      autofocus: false,\n      tools: {\n        header: {\n          class: Header,\n          inlineToolbar: true,\n        },\n        paragraph: {\n          class: Paragraph,\n          inlineToolbar: true,\n          config: {\n            placeholder: 'Tell your story...',\n          },\n        },\n        delimiter: Delimiter,\n        marker: Marker,\n      },\n    });\n  };\n\n  const openEditor = (editorType, content) => {\n    setEditorIsOpen(true);\n\n    if (editorType === 'new') {\n      let draft = window.localStorage.getItem(`editorDraft-new-${wallet.address}`);\n      if (draft === null) {\n        initializeEditor(editorType);\n      } else {\n        initializeEditor(editorType, JSON.parse(draft));\n      }\n    } else if (editorType === 'edit') {\n      let draft = window.localStorage.getItem(`editorDraft-${content.id}-${wallet.address}`);\n      if (draft === null) {\n        initializeEditor(editorType, content);\n      } else {\n        initializeEditor(editorType, JSON.parse(draft));\n      }\n    }\n  };\n\n  const closeEditor = () => {\n    setEditorIsOpen(false);\n  };\n\n  const clearEditor = (editorType) => {\n    if (editorType === 'new') {\n      let draft = window.localStorage.getItem(`editorDraft-new-${wallet.address}`);\n\n      if (draft !== null) {\n        window.localStorage.removeItem(`editorDraft-new-${wallet.address}`);\n        editorJS.current.clear();\n      }\n    } else if (editorType === 'edit') {\n      let draft = window.localStorage.getItem(`editorDraft-${selectedPostToEditID}-${wallet.address}`);\n\n      if (draft !== null) {\n        window.localStorage.removeItem(`editorDraft-${selectedPostToEditID}-${wallet.address}`);\n        closeEditor();\n      }\n    }\n  };\n\n  const resetEditor = () => {\n    let draft = window.localStorage.getItem(`editorDraft-${selectedPostToEditID}-${wallet.address}`);\n\n    if (draft !== null) {\n      window.localStorage.removeItem(`editorDraft-${selectedPostToEditID}-${wallet.address}`);\n    }\n\n    closeEditor();\n\n    editorJS.current.destroy();\n    editorJS.current = null;\n\n    const prevContentPost = userDecryptedPosts.filter((post) => post.id === Number(selectedPostToEditID));\n    const prevContentPostIndex = userDecryptedPosts.indexOf(prevContentPost[0]);\n\n    const content = userDecryptedPosts[prevContentPostIndex];\n\n    openEditor('edit', content);\n  };\n\n  const deletePostHandler = (post) =>\n    setToast({\n      text: 'Are you sure you want to delete the post?',\n      type: 'error',\n      actions: [{ name: 'Delete', handler: () => deletePost(post) }],\n    });\n\n  const handleEdit = async (post) => {\n    setSelectedPostToEditID(post.id);\n    openEditor('edit', post);\n  };\n\n  const handleFieldChange = (value) => {\n    if (value === 'New') {\n      // openEditor('new');\n    } else {\n      closeEditor();\n    }\n  };\n\n  const publishPost = async (postType) => {\n    try {\n      let finalDraft;\n\n      if (postType === 'new') {\n        const draft = window.localStorage.getItem(`editorDraft-new-${wallet.address}`);\n        if (draft !== null) {\n          finalDraft = JSON.parse(draft);\n        }\n      } else if (postType === 'edit') {\n        const draft = window.localStorage.getItem(`editorDraft-${selectedPostToEditID}-${wallet.address}`);\n        if (draft !== null) {\n          finalDraft = JSON.parse(draft);\n        }\n      }\n\n      if (finalDraft.blocks.length === 0) {\n        handleMessage('warning', 'Cannot publish empty posts.');\n      } else {\n        setPublishBtnLoading(true);\n\n        let newPosts = [...userDecryptedPosts];\n\n        if (postType === 'new') {\n          const newPost = {\n            id: newPosts.length + 1,\n            data: finalDraft,\n          };\n\n          newPosts.push(newPost);\n        } else if (postType === 'edit') {\n          const editedPost = {\n            id: Number(selectedPostToEditID),\n            data: finalDraft,\n          };\n\n          const postToEdit = newPosts.filter((post) => post.id === Number(selectedPostToEditID));\n          const postToEditIndex = newPosts.indexOf(postToEdit[0]);\n\n          newPosts[postToEditIndex] = editedPost;\n        }\n\n        const { encryptedPosts, encryptedSymmetricKey } = await encryptPostsWithLit(\n          JSON.stringify(newPosts),\n          userAccessControlConditions,\n          authSig\n        );\n\n        const encryptedPostsBase64 = await encryptedPostsBlobToBase64(encryptedPosts);\n\n        await ceramic.store.merge('writerData', {\n          encryptedPosts: [encryptedPostsBase64],\n        });\n\n        await ceramic.store.merge('writerData', {\n          encryptedSymmetricKey: [encryptedSymmetricKey],\n        });\n\n        setPublishBtnLoading(false);\n\n        if (postType === 'new') {\n          handleMessage('success', 'New post successfully published!');\n        } else if (postType === 'edit') {\n          handleMessage('success', 'Post successfully edited!');\n        }\n\n        if (postType === 'new') {\n          clearEditor(postType);\n        } else if (postType === 'edit') {\n          clearEditor(postType);\n        }\n\n        setSelectedPostToEditID(0);\n\n        handleRerender(true);\n      }\n    } catch (e) {\n      console.log(e);\n\n      setPublishBtnLoading(false);\n      handleMessage('error', e.message);\n    }\n  };\n\n  const deletePost = async (postToDelete) => {\n    try {\n      handleMessage('success', 'Deleting post...');\n\n      let draft = window.localStorage.getItem(`editorDraft-${selectedPostToEditID}-${wallet.address}`);\n\n      if (draft !== null) {\n        window.localStorage.removeItem(`editorDraft-${selectedPostToEditID}-${wallet.address}`);\n      }\n\n      let newPosts = [...userDecryptedPosts];\n\n      newPosts = newPosts.filter((post) => post.id !== postToDelete.id);\n\n      const { encryptedPosts, encryptedSymmetricKey } = await encryptPostsWithLit(\n        JSON.stringify(newPosts),\n        userAccessControlConditions,\n        authSig\n      );\n\n      const encryptedPostsBase64 = await encryptedPostsBlobToBase64(encryptedPosts);\n\n      await ceramic.store.merge('writerData', {\n        encryptedPosts: [encryptedPostsBase64],\n      });\n\n      await ceramic.store.merge('writerData', {\n        encryptedSymmetricKey: [encryptedSymmetricKey],\n      });\n\n      handleMessage('success', 'Post successfully deleted!');\n\n      setSelectedPostToEditID(0);\n\n      handleRerender(true);\n    } catch (e) {\n      console.log(e);\n\n      handleMessage('error', e.message);\n    }\n  };\n\n  useEffect(() => {\n    async function init() {\n      try {\n        if (writer !== undefined) {\n          const userHasDeployed = await writer.getHasWriterDeployed(wallet.address);\n          if (userHasDeployed) {\n            setUserHasDeployed(true);\n\n            const writerData = await ceramic.store.get('writerData', ceramic.did);\n\n            if (writerData !== undefined && writerData !== null) {\n              if (writerData.accessControlConditions) {\n                const accessControlConditions = writerData.accessControlConditions[0];\n                const minTokenCount = accessControlConditions[0].returnValueTest.value;\n\n                if (Number(minTokenCount) > 0) {\n                  setUserAccessControlConditions(accessControlConditions);\n                  setUserHasSetAccessControlConditions(true);\n                }\n              }\n\n              if (writerData.encryptedSymmetricKey) {\n                const encryptedSymmetricKey = writerData.encryptedSymmetricKey[0];\n                setUserEncryptedSymmetricKey(encryptedSymmetricKey);\n              }\n\n              if (writerData.encryptedPosts) {\n                const encryptedPosts = writerData.encryptedPosts[0];\n                setUserEncryptedPosts(encryptedPosts);\n              }\n\n              if (writerData.accessControlConditions && writerData.encryptedSymmetricKey && writerData.encryptedPosts) {\n                if (\n                  writerData.encryptedPosts[0] &&\n                  writerData.encryptedSymmetricKey[0] &&\n                  writerData.accessControlConditions[0]\n                ) {\n                  const encryptedPostsBlob = encryptedPostsBase64ToBlob(writerData.encryptedPosts[0]);\n                  const userDecryptedPosts = await decryptPostsWithLit(\n                    encryptedPostsBlob,\n                    writerData.encryptedSymmetricKey[0],\n                    writerData.accessControlConditions[0],\n                    authSig\n                  );\n                  setUserDecryptedPosts(JSON.parse(userDecryptedPosts.decryptedPosts));\n                }\n              }\n            }\n          }\n        }\n      } catch (e) {\n        console.log(e);\n\n        handleMessage('error', e.message);\n      }\n    }\n    init();\n\n    return () => {\n      if (editorJS.current) {\n        editorJS.current.destroy();\n        editorJS.current = null;\n      }\n    };\n  }, []);\n\n  return (\n    <div className='writer-content'>\n      {!userHasDeployed ? (\n        <>\n          <Note width='fit-content' label='Note '>\n            To start writing your blog, you must first deploy an ERC20 contract (WriterERC20) to create a token gated\n            access to your blog. To do that, head over to <b>My Contract</b> section.\n          </Note>\n        </>\n      ) : userHasDeployed && !userHasSetAccessControlConditions ? (\n        <>\n          <Note width='fit-content' label='Note '>\n            To start writing your blog, you must set an access control condition i.e, set a minimum no. of your tokens a\n            user must own in order to read your blog. To do that, head over to <b>Access Control</b> section.\n          </Note>\n        </>\n      ) : userHasDeployed && userHasSetAccessControlConditions ? (\n        <>\n          <Fieldset.Group value='New' onChange={handleFieldChange}>\n            <Fieldset label='New'>\n              {!editorIsOpen ? (\n                <div className='editor-close-section'>\n                  <div className='open-editor-btn'>\n                    <ChevronsRight />\n                    <ChevronsRight />\n                    <ChevronsRight />\n                    <Button type='secondary' shadow auto marginRight='2.8' onClick={() => openEditor('new')}>\n                      Open Editor\n                    </Button>\n                  </div>\n                </div>\n              ) : editorIsOpen ? (\n                <div className='editor-open-section'>\n                  <div className='close-editor-btn'>\n                    <ChevronsDown />\n                    <Button type='secondary' ghost auto marginRight='2.8' onClick={() => closeEditor()}>\n                      Close Editor\n                    </Button>\n                  </div>\n                  <div id='newEditor'></div>\n                  <div className='delete-and-save-btns'>\n                    <Button type='error' ghost onClick={() => clearEditor('new')} auto>\n                      delete\n                    </Button>\n                    {publishBtnLoading ? (\n                      <Button type='secondary' shadow loading auto>\n                        Publish\n                      </Button>\n                    ) : (\n                      <Button type='secondary' shadow onClick={() => publishPost('new')} auto>\n                        Publish\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              ) : null}\n            </Fieldset>\n\n            <Fieldset label='My Posts' paddingBottom='1'>\n              {userDecryptedPosts.length === 0 ? (\n                <>\n                  <Note width='fit-content' label='Note '>\n                    You have not published any posts yet. To publish your first post, head over to <b>New</b> section.\n                  </Note>\n                </>\n              ) : userDecryptedPosts.length > 0 && !editorIsOpen ? (\n                <div className='all-posts'>\n                  {userDecryptedPosts.map((post) => {\n                    return (\n                      <Card key={post.id} shadow width='95%'>\n                        <Card.Content>{convertCleanDataToHTML(post.data.blocks)}</Card.Content>\n                        <Card.Footer>\n                          <div className='card-footer'>\n                            <div className='footer-text'>\n                              <Text i>{convertToDate(post.data.time)}</Text>\n                            </div>\n                            <div className='footer-icons'>\n                              <Edit className='edit-icon' onClick={() => handleEdit(post)} />\n                              <Trash className='delete-icon' color='red' onClick={() => deletePostHandler(post)} />\n                            </div>\n                          </div>\n                        </Card.Footer>\n                      </Card>\n                    );\n                  })}\n                </div>\n              ) : (\n                <div className='editor-open-section'>\n                  <div className='close-editor-btn'>\n                    <ChevronsDown />\n                    <Button type='secondary' ghost auto marginRight='2.8' onClick={() => closeEditor()}>\n                      Close Editor\n                    </Button>\n                  </div>\n                  <div id='editEditor'></div>\n                  <div className='delete-and-save-btns'>\n                    <Button type='warning' ghost onClick={() => resetEditor()} auto>\n                      Reset\n                    </Button>\n                    {publishBtnLoading ? (\n                      <Button type='secondary' shadow loading auto>\n                        Publish\n                      </Button>\n                    ) : (\n                      <Button type='secondary' shadow onClick={() => publishPost('edit')} auto>\n                        Publish\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              )}\n            </Fieldset>\n          </Fieldset.Group>\n        </>\n      ) : null}\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport contractABI from '../../contracts/abi.json';\nimport { getUserByAddress, addSubscriber, removeSubscriber } from '../../lib/threadDB';\nimport './style.css';\nimport { Button, Spacer, Spinner, Note, Tag, Description, Input, Link } from '@geist-ui/core';\n\nexport const MyContract = ({ wallet, ceramic, writer, handleRerender, handleMessage }) => {\n  const [tokenName, setTokenName] = useState('');\n  const [tokenSymbol, setTokenSymbol] = useState('');\n  const [tokenPrice, setTokenPrice] = useState('');\n  const [initialMint, setInitialMinit] = useState('');\n  const [deploymentFee, setDeploymentFee] = useState('');\n  const [userHasDeployed, setUserHasDeployed] = useState(false);\n  const [writerERC20, setWriterERC20] = useState();\n  const [userDeployedContractAddress, setUserDeployedContractAddress] = useState('');\n  const [userTokenName, setUserTokenName] = useState('');\n  const [userTokenSymbol, setUserTokenSymbol] = useState('');\n  const [userTokenPrice, setUserTokenPrice] = useState('');\n  const [userTokenTotalMinted, setUserTokenTotalMinted] = useState('');\n  const [userTokenContractBalance, setUserTokenContractBalance] = useState('');\n  const [userTokenBalance, setUserTokenBalance] = useState('');\n  const [newMint, setNewMint] = useState();\n  const [transferAddress, setTransferAddress] = useState();\n  const [transferAmount, setTransferAmount] = useState();\n  const [newTokenPrice, setNewTokenPrice] = useState();\n  const [deployBtnLoading, setDeployBtnLoading] = useState(false);\n  const [mintBtnLoading, setMintBtnLoading] = useState(false);\n  const [transferBtnLoading, setTransferBtnLoading] = useState(false);\n  const [changePriceBtnLoading, setChangePriceBtnLoading] = useState(false);\n  const [withdrawBtnLoading, setWithdrawBtnLoading] = useState(false);\n\n  const deployWriterERC20Contract = async () => {\n    try {\n      if (!tokenName) {\n        handleMessage('warning', 'Please enter token name.');\n      } else if (!tokenSymbol) {\n        handleMessage('warning', 'Please enter token symbol.');\n      } else if (!tokenPrice) {\n        handleMessage('warning', 'Please enter token price.');\n      } else if (!initialMint) {\n        handleMessage('warning', 'Please enter no.of tokens.');\n      } else {\n        setDeployBtnLoading(true);\n\n        const txn = await writer.deployWriterERC20Contract(\n          ceramic.did,\n          tokenName,\n          tokenSymbol,\n          ethers.utils.parseEther(tokenPrice),\n          Number(initialMint),\n          { value: deploymentFee }\n        );\n\n        const receipt = await txn.wait();\n\n        if (receipt.status === 1) {\n          setDeployBtnLoading(false);\n          handleMessage('success', 'Transaction successful!');\n        } else {\n          setDeployBtnLoading(false);\n          handleMessage('error', 'Transaction failed!');\n        }\n\n        setTokenName('');\n        setTokenSymbol('');\n        setTokenPrice('');\n        setInitialMinit('');\n\n        handleRerender(true);\n      }\n    } catch (e) {\n      console.log(e);\n\n      setDeployBtnLoading(false);\n      handleMessage('error', e.message);\n    }\n  };\n\n  const mintNewTokens = async () => {\n    try {\n      if (!newMint) {\n        handleMessage('warning', 'Please enter no. of tokens.');\n      } else if (Number(newMint) <= 0) {\n        handleMessage('warning', 'No. of tokens should be atleast 1.');\n      } else {\n        setMintBtnLoading(true);\n\n        let mintPrice = await writerERC20.getTokenPrice();\n        mintPrice = String(mintPrice * newMint);\n\n        const txn = await writerERC20.mint(Number(newMint), { value: mintPrice });\n\n        const receipt = await txn.wait();\n\n        if (receipt.status === 1) {\n          handleMessage('success', 'Transaction successful!');\n          handleMessage('success', 'Updating user on threadDB...');\n        } else {\n          setMintBtnLoading(false);\n          handleMessage('error', 'Transaction failed!');\n        }\n\n        const loggedInUserBalanceOfWriterToken = await writerERC20.balanceOf(wallet.address);\n        const writerData = await ceramic.store.get('writerData', ceramic.did);\n        if (writerData !== undefined && writerData !== null) {\n          if (writerData.accessControlConditions[0] !== null) {\n            const writerRequiredNoOfTokensToAccess = writerData.accessControlConditions[0][0].returnValueTest.value;\n            if (Number(loggedInUserBalanceOfWriterToken) >= Number(writerRequiredNoOfTokensToAccess)) {\n              await addSubscriber(ceramic.did, ceramic.did);\n            } else {\n              await removeSubscriber(ceramic.did, ceramic.did);\n            }\n          }\n        }\n\n        handleMessage('success', 'User updated on threadDB!');\n        setMintBtnLoading(false);\n\n        setNewMint('');\n\n        handleRerender(true);\n      }\n    } catch (e) {\n      console.log(e);\n\n      setMintBtnLoading(false);\n      handleMessage('error', e.message);\n    }\n  };\n\n  const transferTokens = async () => {\n    try {\n      if (!transferAddress) {\n        handleMessage('warning', 'Please enter transfer address.');\n      } else if (!ethers.utils.isAddress(transferAddress)) {\n        handleMessage('warning', 'Please enter valid address.');\n      } else if (!transferAmount) {\n        handleMessage('warning', 'Please enter no. of tokens');\n      } else if (Number(transferAmount) <= 0) {\n        handleMessage('warning', 'No. of tokens should be atleast 1.');\n      } else {\n        setTransferBtnLoading(true);\n\n        const txn = await writerERC20.transfer(transferAddress, Number(transferAmount));\n\n        const receipt = await txn.wait();\n\n        if (receipt.status === 1) {\n          handleMessage('success', 'Transaction successful!');\n          handleMessage('success', 'Updating user on threadDB...');\n        } else {\n          setTransferBtnLoading(false);\n          handleMessage('error', 'Transaction failed!');\n        }\n\n        const transferToUserBalanceOfWriterToken = await writerERC20.balanceOf(transferAddress);\n        const writerData = await ceramic.store.get('writerData', ceramic.did);\n        if (writerData !== undefined && writerData !== null) {\n          if (writerData.accessControlConditions[0] !== null) {\n            const writerRequiredNoOfTokensToAccess = writerData.accessControlConditions[0][0].returnValueTest.value;\n\n            const transferToUser = await getUserByAddress(transferAddress);\n            if (Number(transferToUserBalanceOfWriterToken) >= Number(writerRequiredNoOfTokensToAccess)) {\n              await addSubscriber(ceramic.did, transferToUser.did);\n            } else {\n              await removeSubscriber(ceramic.did, transferToUser.did);\n            }\n          }\n        }\n\n        handleMessage('success', 'User updated on threadDB!');\n        setTransferBtnLoading(false);\n\n        setTransferAddress('');\n        setTransferAmount('');\n\n        handleRerender(true);\n      }\n    } catch (e) {\n      console.log(e);\n\n      setTransferBtnLoading(false);\n      handleMessage('error', e.message);\n    }\n  };\n\n  const changeTokenPrice = async () => {\n    try {\n      if (!newTokenPrice) {\n        handleMessage('warning', 'Please enter new token price.');\n      } else {\n        setChangePriceBtnLoading(true);\n\n        const txn = await writerERC20.setTokenPrice(ethers.utils.parseEther(newTokenPrice));\n\n        const receipt = await txn.wait();\n\n        if (receipt.status === 1) {\n          setChangePriceBtnLoading(false);\n          handleMessage('success', 'Transaction successful!');\n        } else {\n          setChangePriceBtnLoading(false);\n          handleMessage('error', 'Transaction failed!');\n        }\n\n        setNewTokenPrice('');\n\n        handleRerender(true);\n      }\n    } catch (e) {\n      console.log(e);\n\n      setChangePriceBtnLoading(false);\n      handleMessage('error', e.message);\n    }\n  };\n\n  const withdrawBalance = async () => {\n    try {\n      setWithdrawBtnLoading(true);\n\n      const txn = await writerERC20.withdrawBalance();\n\n      const receipt = await txn.wait();\n\n      if (receipt.status === 1) {\n        setWithdrawBtnLoading(false);\n        handleMessage('success', 'Transaction successful!');\n      } else {\n        setWithdrawBtnLoading(false);\n        handleMessage('error', 'Transaction failed!');\n      }\n\n      handleRerender(true);\n    } catch (e) {\n      console.log(e);\n\n      setWithdrawBtnLoading(false);\n      handleMessage('error', e.message);\n    }\n  };\n\n  useEffect(() => {\n    async function init() {\n      if (writer !== undefined) {\n        const deploymentFee = await writer.getDeploymentFee();\n        setDeploymentFee(deploymentFee);\n\n        const userHasDeployed = await writer.getHasWriterDeployed(wallet.address);\n        if (userHasDeployed) {\n          setUserHasDeployed(true);\n\n          const deployedContractAddress = await writer.getWriterDeployedContractAddress(wallet.address);\n          setUserDeployedContractAddress(deployedContractAddress);\n\n          const writerERC20 = new ethers.Contract(deployedContractAddress, contractABI.writerERC20, wallet.signer);\n          setWriterERC20(writerERC20);\n\n          const userTokenName = await writerERC20.name();\n          setUserTokenName(userTokenName);\n          const userTokenSymbol = await writerERC20.symbol();\n          setUserTokenSymbol(userTokenSymbol);\n          const userTokenPrice = ethers.utils.formatEther(await writerERC20.getTokenPrice()) + ' MATIC';\n          setUserTokenPrice(userTokenPrice);\n          const userTokenTotalMinted = Number(await writerERC20.totalSupply());\n          setUserTokenTotalMinted(userTokenTotalMinted);\n          const userTokenContractBalance = ethers.utils.formatEther(await writerERC20.getContractBalance()) + ' MATIC';\n          setUserTokenContractBalance(userTokenContractBalance);\n          const userTokenBalance = Number(await writerERC20.balanceOf(wallet.address));\n          setUserTokenBalance(userTokenBalance);\n        }\n      }\n    }\n    init();\n  }, []);\n\n  return (\n    <div className='contract-content'>\n      {userHasDeployed ? (\n        <div className='user-contract-content'>\n          <div className='reads'>\n            <Description\n              title='Contract'\n              content={\n                !userDeployedContractAddress ? (\n                  <Spinner />\n                ) : (\n                  <Link\n                    href={`https://mumbai.polygonscan.com/address/${userDeployedContractAddress}`}\n                    target={'_blank'}\n                    icon\n                    style={{ color: '#7B3FE4', fontWeight: 'bold' }}\n                  >\n                    Polygonscan\n                  </Link>\n                )\n              }\n            />\n            <Description title='Token Name' content={!userTokenName ? <Spinner /> : userTokenName} />\n            <Description title='Token Symbol' content={!userTokenSymbol ? <Spinner /> : userTokenSymbol} />\n            <Description title='Token Price' content={!userTokenPrice ? <Spinner /> : userTokenPrice} />\n            <Description title='Total Minted' content={!userTokenTotalMinted ? <Spinner /> : userTokenTotalMinted} />\n            <Description\n              title='Your Token Balance'\n              content={!userTokenBalance && userTokenBalance !== 0 ? <Spinner /> : userTokenBalance}\n            />\n            <Description\n              title='Contract Balance'\n              content={!userTokenContractBalance ? <Spinner /> : userTokenContractBalance}\n            />\n          </div>\n          <div className='writes'>\n            <div className='write'>\n              <Input\n                clearable\n                type='secondary'\n                placeholder='No. of tokens: 1000'\n                onChange={(e) => setNewMint(e.target.value)}\n                width='80%'\n              >\n                Mint New Tokens\n              </Input>\n              {mintBtnLoading ? (\n                <Button type='secondary' shadow loading className='btn' scale={0.8}>\n                  Mint\n                </Button>\n              ) : (\n                <Button type='secondary' shadow className='btn' scale={0.8} onClick={mintNewTokens}>\n                  Mint\n                </Button>\n              )}\n            </div>\n            <div className='write'>\n              <Input\n                clearable\n                type='secondary'\n                placeholder='To Address: 0x0'\n                onChange={(e) => setTransferAddress(e.target.value)}\n                width='80%'\n              >\n                Transfer Tokens\n              </Input>\n              <Input\n                clearable\n                type='secondary'\n                placeholder='No.of tokens: 30'\n                onChange={(e) => setTransferAmount(e.target.value)}\n                width='80%'\n              />\n              {transferBtnLoading ? (\n                <Button type='secondary' shadow loading className='btn' scale={0.8}>\n                  Transfer\n                </Button>\n              ) : (\n                <Button type='secondary' shadow className='btn' scale={0.8} onClick={transferTokens}>\n                  Transfer\n                </Button>\n              )}\n            </div>\n            <div className='write'>\n              <Input\n                clearable\n                type='secondary'\n                placeholder='Token Price: 0.003'\n                onChange={(e) => setNewTokenPrice(e.target.value)}\n                width='80%'\n              >\n                Set New Token Price (MATIC)\n              </Input>\n              {changePriceBtnLoading ? (\n                <Button type='secondary' shadow loading className='btn' scale={0.8}>\n                  Change Price\n                </Button>\n              ) : (\n                <Button type='secondary' shadow className='btn' scale={0.8} onClick={changeTokenPrice}>\n                  Change Price\n                </Button>\n              )}\n            </div>\n          </div>\n          <div className='withdraw-balance'>\n            {withdrawBtnLoading ? (\n              <Button type='secondary' shadow loading auto scale={0.8}>\n                Widthdraw Balance\n              </Button>\n            ) : (\n              <Button type='secondary' shadow auto scale={0.8} onClick={withdrawBalance}>\n                Widthdraw Balance\n              </Button>\n            )}\n          </div>\n        </div>\n      ) : (\n        <>\n          <Note width='fit-content' label='Note '>\n            To start writing your blog, you must first deploy an ERC20 contract (WriterERC20) to create a token gated\n            access to your blog.\n          </Note>\n          <Spacer h={3} />\n          <Description\n            title='Deployment Fee'\n            content={\n              !deploymentFee ? <Spinner /> : <Tag type='lite'>{ethers.utils.formatEther(deploymentFee) + ' MATIC'}</Tag>\n            }\n          />\n          <Spacer h={2} />\n          <div className='contract-form'>\n            <Input value='ERC20' readOnly type='secondary' width='50%'>\n              Contract Type\n            </Input>\n            <Input\n              clearable\n              type='secondary'\n              placeholder='Token'\n              onChange={(e) => setTokenName(e.target.value)}\n              width='50%'\n            >\n              Token Name\n            </Input>\n            <Input\n              clearable\n              type='secondary'\n              placeholder='TKN'\n              onChange={(e) => setTokenSymbol(e.target.value)}\n              width='50%'\n            >\n              Token Symbol\n            </Input>\n            <Input\n              clearable\n              type='secondary'\n              placeholder='0.02'\n              onChange={(e) => setTokenPrice(e.target.value)}\n              width='50%'\n            >\n              Token Price (MATIC)\n            </Input>\n            <Input\n              clearable\n              type='secondary'\n              placeholder='1000'\n              onChange={(e) => setInitialMinit(e.target.value)}\n              width='50%'\n            >\n              Initial Mint\n            </Input>\n            {deployBtnLoading ? (\n              <Button type='secondary' shadow loading scale={0.8} className='btn' onClick={deployWriterERC20Contract}>\n                Deploy Contract\n              </Button>\n            ) : (\n              <Button type='secondary' shadow scale={0.8} className='btn' onClick={deployWriterERC20Contract}>\n                Deploy Contract\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport Identicon from 'react-identicons';\nimport { getUserByAddress } from '../../lib/threadDB';\nimport './style.css';\nimport { Button, Spinner, Card, Text, Description, Input, Snippet, Link } from '@geist-ui/core';\n\nexport const WriterContract = ({ wallet, ceramic, writer, handleRerender, handleMessage }) => {\n  const [writerContractAddress, setWriterContractAddress] = useState('');\n  const [ownerAddress, setOwnerAddress] = useState('');\n  const [ownerDID, setOwnerDID] = useState('');\n  const [ownerBasicProfile, setOwnerBasicProfile] = useState('');\n  const [userIsOwner, setUserIsOwner] = useState(false);\n  const [contractBalance, setContractBalance] = useState('');\n  const [deploymentFee, setDeploymentFee] = useState('');\n  const [getterAddress, setGetterAddress] = useState('');\n  const [newDeploymentFee, setNewDeploymentFee] = useState('');\n  const [deployedContractAddress, setDeployedContractAddress] = useState('');\n  const [withdrawBtnLoading, setWithdrawBtnLoading] = useState(false);\n  const [getAddressBtnLoading, setGetAddressBtnLoading] = useState(false);\n  const [changeDeploymentFeeBtnLoading, setChangeDeploymentFeeBtnLoading] = useState(false);\n\n  const withdrawBalance = async () => {\n    try {\n      setWithdrawBtnLoading(true);\n\n      const txn = await writer.withdrawBalance();\n\n      const receipt = await txn.wait();\n\n      if (receipt.status === 1) {\n        setWithdrawBtnLoading(false);\n        handleMessage('success', 'Transaction successful!');\n      } else {\n        setWithdrawBtnLoading(false);\n        handleMessage('error', 'Transaction failed!');\n      }\n\n      handleRerender(true);\n    } catch (e) {\n      console.log(e);\n\n      setWithdrawBtnLoading(false);\n      handleMessage('error', e.message);\n    }\n  };\n\n  const getDeployedContractAddress = async () => {\n    try {\n      if (!getterAddress) {\n        handleMessage('warning', 'Please enter writer address.');\n      } else if (!ethers.utils.isAddress(getterAddress)) {\n        handleMessage('warning', 'Please enter valid address.');\n      } else {\n        const hasDeployed = await writer.getHasWriterDeployed(getterAddress);\n\n        if (!hasDeployed) {\n          handleMessage('warning', 'No contract deployed by this address.');\n        } else {\n          setGetAddressBtnLoading(true);\n\n          setDeployedContractAddress('');\n\n          const deployedContractAddress = await writer.getWriterDeployedContractAddress(getterAddress);\n          setDeployedContractAddress(deployedContractAddress);\n\n          setGetAddressBtnLoading(false);\n          setGetterAddress('');\n        }\n      }\n    } catch (e) {\n      console.log(e);\n\n      setGetAddressBtnLoading(false);\n      handleMessage('error', e.message);\n    }\n  };\n\n  const changeDeploymentFee = async () => {\n    try {\n      if (!newDeploymentFee) {\n        handleMessage('warning', 'Please enter new deployment fee.');\n      } else {\n        setChangeDeploymentFeeBtnLoading(true);\n\n        const txn = await writer.setDeploymentFee(ethers.utils.parseEther(newDeploymentFee));\n\n        const receipt = await txn.wait();\n\n        if (receipt.status === 1) {\n          setChangeDeploymentFeeBtnLoading(false);\n          handleMessage('success', 'Transaction successful!');\n        } else {\n          setChangeDeploymentFeeBtnLoading(false);\n          handleMessage('error', 'Transaction failed!');\n        }\n\n        setNewDeploymentFee('');\n\n        handleRerender(true);\n      }\n    } catch (e) {\n      console.log(e);\n\n      setChangeDeploymentFeeBtnLoading(false);\n      handleMessage('error', e.message);\n    }\n  };\n\n  useEffect(() => {\n    async function init() {\n      if (writer !== undefined) {\n        const writerContractAddress = await writer.address;\n        setWriterContractAddress(writerContractAddress);\n        const ownerAddress = await writer.owner();\n        setOwnerAddress(ownerAddress);\n        if (ownerAddress === wallet.address) setUserIsOwner(true);\n        const contractBalance = await writer.getContractBalance();\n        setContractBalance(ethers.utils.formatEther(contractBalance));\n        const deploymentFee = await writer.getDeploymentFee();\n        setDeploymentFee(ethers.utils.formatEther(deploymentFee));\n\n        const owner = await getUserByAddress(ownerAddress);\n        const ownerDID = owner.did;\n        setOwnerDID(ownerDID);\n\n        const ownerBasicProfile = await ceramic.store.get('basicProfile', owner.did);\n        if (ownerBasicProfile !== undefined && ownerBasicProfile !== null) {\n          setOwnerBasicProfile(ownerBasicProfile);\n        }\n      }\n    }\n    init();\n  }, [writer]);\n\n  return (\n    <div className='writer-contract-content'>\n      <div className='writer-contract-reads'>\n        <Description\n          title={wallet.address === ownerAddress ? 'Owner (You)' : 'Owner'}\n          content={\n            ownerBasicProfile ? (\n              <Card shadow marginTop='0.5' width='fit-content'>\n                <div className='owner'>\n                  <div className='owner-identicon-profile'>\n                    <div className='owner-identicon'>\n                      <Identicon string={ownerAddress} bg='#eef' size='40' />\n                    </div>\n                    <div className='owner-basic-profile'>\n                      <div className='owner-name'>\n                        {ownerBasicProfile.name ? (\n                          <Text margin='0' b>\n                            {ownerBasicProfile.name}\n                          </Text>\n                        ) : (\n                          <Text margin='0'>--</Text>\n                        )}\n                      </div>\n                      <div className='owner-description'>\n                        <Text margin='0'>{ownerBasicProfile.description ? ownerBasicProfile.description : '--'}</Text>\n                      </div>\n                      <div className='owner-emoji'>\n                        <Text margin='0'>{ownerBasicProfile.emoji ? ownerBasicProfile.emoji : '--'}</Text>\n                      </div>\n                    </div>\n                  </div>\n                  <div className='owner-address-did'>\n                    <div className='owner-did'>\n                      <Snippet symbol='DID' text={ownerDID} width='400px' copy='prevent' />\n                    </div>\n                    <div className='owner-address'>\n                      <Snippet type='lite' symbol='Address' text={ownerAddress} width='400px' />\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            ) : (\n              <Spinner />\n            )\n          }\n        />\n        <Description\n          title='Contract'\n          content={\n            !writerContractAddress ? (\n              <Spinner />\n            ) : (\n              <Link\n                href={`https://mumbai.polygonscan.com/address/${writerContractAddress}`}\n                target={'_blank'}\n                icon\n                style={{ color: '#7B3FE4', fontWeight: 'bold' }}\n              >\n                Polygonscan\n              </Link>\n            )\n          }\n        />\n        <div className='contract-balance-and-withdraw'>\n          <Description title='Contract Balance' content={!contractBalance ? <Spinner /> : contractBalance + ' MATIC'} />\n          {userIsOwner ? (\n            <>\n              {withdrawBtnLoading ? (\n                <Button type='secondary' marginTop='1rem' shadow loading auto scale={0.8}>\n                  Widthdraw Balance\n                </Button>\n              ) : (\n                <Button type='secondary' marginTop='1rem' shadow auto scale={0.8} onClick={withdrawBalance}>\n                  Widthdraw Balance\n                </Button>\n              )}\n            </>\n          ) : null}\n        </div>\n        <Description title='Deployment Fee' content={!deploymentFee ? <Spinner /> : deploymentFee + ' MATIC'} />\n        <div className='writer-contract-read'>\n          <Input\n            clearable\n            onClearClick={() => setDeployedContractAddress('')}\n            type='secondary'\n            placeholder='Writer Address: 0x0'\n            onChange={(e) => setGetterAddress(e.target.value)}\n            width='80%'\n          >\n            Get Deployed Contract Address\n          </Input>\n          {getAddressBtnLoading ? (\n            <Button type='secondary' shadow loading auto scale={0.8}>\n              Get Contract Address\n            </Button>\n          ) : (\n            <Button type='secondary' shadow auto scale={0.8} onClick={getDeployedContractAddress}>\n              Get Contract Address\n            </Button>\n          )}\n          {!deployedContractAddress ? null : (\n            <Snippet type='lite' symbol='' text={deployedContractAddress} width='300px' />\n          )}\n        </div>\n      </div>\n      <div className='writer-contract-writes'>\n        {userIsOwner ? (\n          <div className='writer-contract-write'>\n            <Input\n              clearable\n              type='secondary'\n              placeholder='Deployment Fee: 0.006'\n              onChange={(e) => setNewDeploymentFee(e.target.value)}\n              width='80%'\n            >\n              Change Deployment Fee (MATIC)\n            </Input>\n            {changeDeploymentFeeBtnLoading ? (\n              <Button type='secondary' shadow loading auto scale={0.8}>\n                Change Fee\n              </Button>\n            ) : (\n              <Button type='secondary' shadow auto scale={0.8} onClick={changeDeploymentFee}>\n                Change Fee\n              </Button>\n            )}\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport Identicon from 'react-identicons';\nimport contractABI from '../../contracts/abi.json';\nimport { getUserByDID, addSubscriber, removeSubscriber } from '../../lib/threadDB';\nimport { encryptedPostsBase64ToBlob, decryptPostsWithLit } from '../../lib/lit';\nimport { convertCleanDataToHTML, convertToDate } from '../../utils/markup-parser';\nimport './style.css';\nimport {\n  Link,\n  Badge,\n  Button,\n  Input,\n  Description,\n  Snippet,\n  Text,\n  Spinner,\n  Fieldset,\n  Card,\n  Tag,\n  Note,\n  Breadcrumbs,\n} from '@geist-ui/core';\n\nexport const Read = ({ wallet, ceramic, writer, authSig, users, handleRerender, handleMessage }) => {\n  const [allWriters, setAllWriters] = useState([]);\n  const [subscribedToWriters, setSubscribedToWriters] = useState([]);\n  const [myWriting, setMyWriting] = useState([]);\n  const [mySubscribers, setMySubscribers] = useState([]);\n  const [showWritersPage, setShowWritersPage] = useState(true);\n  const [showProfilePage, setShowProfilePage] = useState(false);\n  const [showContractPage, setShowContractPage] = useState(false);\n  const [showReadPage, setShowReadPage] = useState(false);\n  const [currentProfile, setCurrentProfile] = useState();\n  const [currentProfileDecryptedPosts, setCurrentProfileDecryptedPosts] = useState([]);\n  const [newMint, setNewMint] = useState();\n  const [mintBtnLoading, setMintBtnLoading] = useState(false);\n  const [transferAddress, setTransferAddress] = useState();\n  const [transferAmount, setTransferAmount] = useState();\n  const [transferBtnLoading, setTransferBtnLoading] = useState(false);\n  const [currentField, setCurrentField] = useState('All Writers');\n  const [loggedInUserIsAWriter, setLoggedInUserIsAWriter] = useState(false);\n  const [showInfo, setShowInfo] = useState(false);\n  const [postsLoading, setPostsLoading] = useState(false);\n\n  const handleShowWritersPage = () => {\n    setCurrentProfile({});\n    setShowProfilePage(false);\n    setShowContractPage(false);\n    setShowReadPage(false);\n\n    setShowWritersPage(true);\n  };\n\n  const handleShowProfilePage = (writer) => {\n    setCurrentProfile(writer);\n    setShowWritersPage(false);\n    setShowContractPage(false);\n    setShowReadPage(false);\n\n    setShowProfilePage(true);\n  };\n\n  const handleShowContractPage = () => {\n    setShowWritersPage(false);\n    setShowProfilePage(false);\n    setShowReadPage(false);\n\n    setShowContractPage(true);\n  };\n\n  const handleShowReadPage = async (writer) => {\n    setShowWritersPage(false);\n    setShowProfilePage(false);\n    setShowContractPage(false);\n\n    setShowReadPage(true);\n\n    await readBlog(writer);\n  };\n\n  const handleFieldChange = (value) => {\n    setCurrentField(value);\n\n    if (value === 'My Subscribers') {\n      setCurrentProfile({});\n      setShowWritersPage(false);\n      setShowProfilePage(false);\n      setShowContractPage(false);\n      setShowReadPage(false);\n    } else {\n      handleShowWritersPage();\n    }\n  };\n\n  const mintNewTokens = async (writer) => {\n    try {\n      if (!newMint) {\n        handleMessage('warning', 'Please enter no. of tokens.');\n      } else if (Number(newMint) <= 0) {\n        handleMessage('warning', 'No. of tokens should be atleast 1.');\n      } else {\n        setMintBtnLoading(true);\n\n        let mintPrice = await writer.writerERC20.getTokenPrice();\n        mintPrice = String(mintPrice * newMint);\n\n        const txn = await writer.writerERC20.mint(Number(newMint), { value: mintPrice });\n\n        const receipt = await txn.wait();\n\n        if (receipt.status === 1) {\n          handleMessage('success', 'Transaction successful!');\n          handleMessage('success', 'Updating user on threadDB...');\n        } else {\n          setMintBtnLoading(false);\n          handleMessage('error', 'Transaction failed!');\n        }\n\n        const loggedInUserBalanceOfWriterToken = await writer.writerERC20.balanceOf(wallet.address);\n        const writerRequiredNoOfTokensToAccess = writer.accessControlConditions[0].returnValueTest.value;\n        if (Number(loggedInUserBalanceOfWriterToken) >= Number(writerRequiredNoOfTokensToAccess)) {\n          await addSubscriber(writer.did, ceramic.did);\n        } else {\n          await removeSubscriber(writer.did, ceramic.did);\n        }\n\n        handleMessage('success', 'User updated on threadDB!');\n        setMintBtnLoading(false);\n\n        setNewMint('');\n\n        handleRerender(true);\n        handleShowWritersPage();\n      }\n    } catch (e) {\n      console.log(e);\n\n      setMintBtnLoading(false);\n      handleMessage('error', e.message);\n    }\n  };\n\n  const transferTokens = async (writer) => {\n    try {\n      if (!transferAddress) {\n        handleMessage('warning', 'Please enter transfer address.');\n      } else if (!ethers.utils.isAddress(transferAddress)) {\n        handleMessage('warning', 'Please enter valid address.');\n      } else if (!transferAmount) {\n        handleMessage('warning', 'Please enter no. of tokens');\n      } else if (Number(transferAmount) <= 0) {\n        handleMessage('warning', 'No. of tokens should be atleast 1.');\n      } else {\n        setTransferBtnLoading(true);\n\n        const txn = await writer.writerERC20.transfer(transferAddress, Number(transferAmount));\n\n        const receipt = await txn.wait();\n\n        if (receipt.status === 1) {\n          handleMessage('success', 'Transaction successful!');\n          handleMessage('success', 'Updating user on threadDB...');\n        } else {\n          setTransferBtnLoading(false);\n          handleMessage('error', 'Transaction failed!');\n        }\n\n        const loggedInUserBalanceOfWriterToken = await writer.writerERC20.balanceOf(wallet.address);\n        const writerRequiredNoOfTokensToAccess = writer.accessControlConditions[0].returnValueTest.value;\n        if (Number(loggedInUserBalanceOfWriterToken) >= Number(writerRequiredNoOfTokensToAccess)) {\n          await addSubscriber(writer.did, ceramic.did);\n        } else {\n          await removeSubscriber(writer.did, ceramic.did);\n        }\n\n        handleMessage('success', 'User updated on threadDB!');\n        setTransferBtnLoading(false);\n\n        setTransferAddress('');\n        setTransferAmount('');\n\n        handleRerender(true);\n        handleShowWritersPage();\n      }\n    } catch (e) {\n      console.log(e);\n\n      setTransferBtnLoading(false);\n      handleMessage('error', e.message);\n    }\n  };\n\n  const readBlog = async (writer) => {\n    try {\n      setCurrentProfileDecryptedPosts([]);\n      setShowInfo(false);\n      setPostsLoading(true);\n\n      if (writer.accessControlConditions && writer.encryptedSymmetricKey && writer.encryptedPosts) {\n        if (\n          writer.encryptedPosts !== null &&\n          writer.encryptedSymmetricKey !== null &&\n          writer.accessControlConditions !== null\n        ) {\n          const encryptedPostsBlob = encryptedPostsBase64ToBlob(writer.encryptedPosts);\n          const writerDecryptedPosts = await decryptPostsWithLit(\n            encryptedPostsBlob,\n            writer.encryptedSymmetricKey,\n            writer.accessControlConditions,\n            authSig\n          );\n          setCurrentProfileDecryptedPosts(JSON.parse(writerDecryptedPosts.decryptedPosts));\n          setShowInfo(true);\n          setPostsLoading(false);\n        }\n      }\n    } catch (e) {\n      console.log(e);\n\n      if (e.message === 'not_authorized') {\n        setPostsLoading(false);\n        const res = alert('You are not authorized to access this content.');\n        if (res === undefined) {\n          handleShowProfilePage(currentProfile);\n        }\n      }\n    }\n  };\n\n  const renderWriters = (writersArray) => {\n    return (\n      <>\n        {showWritersPage && !showProfilePage && !showContractPage && !showReadPage ? (\n          <div className='all-writers'>\n            {writersArray.length < 1 ? (\n              <Spinner />\n            ) : (\n              <>\n                <div className='all-writers-cards'>\n                  {writersArray.map((writer) => {\n                    if (writer) {\n                      return (\n                        <Card\n                          key={writer.address}\n                          type='lite'\n                          style={{ backgroundColor: writer.address === wallet.address ? '#eef' : '' }}\n                          shadow\n                          width='100%'\n                        >\n                          <div className='writer'>\n                            <div className='writer-details-all'>\n                              <div className='writer-identicon-profile'>\n                                <div className='writer-identicon'>\n                                  <Identicon\n                                    string={writer.address}\n                                    bg={writer.address === wallet.address ? '#fff' : '#eef'}\n                                    size='40'\n                                  />\n                                </div>\n                                <div className='writer-basic-profile'>\n                                  <div className='writer-name'>\n                                    {writer.name ? (\n                                      <Text margin='0' b>\n                                        {writer.name}\n                                      </Text>\n                                    ) : (\n                                      <Text margin='0'>--</Text>\n                                    )}\n                                  </div>\n                                  <div className='writer-description'>\n                                    <Text margin='0'>{writer.description ? writer.description : '--'}</Text>\n                                  </div>\n                                  <div className='writer-emoji'>\n                                    <Text margin='0'>{writer.emoji ? writer.emoji : '--'}</Text>\n                                  </div>\n                                </div>\n                              </div>\n                              <div className='writer-card-top-right'>\n                                <Badge.Anchor>\n                                  <Badge scale={0.8} marginBottom='0.7' style={{ backgroundColor: 'darkgreen' }}>\n                                    {writer.subscribedBy.length > 1000 ? '1k+' : writer.subscribedBy.length}\n                                  </Badge>\n                                  <Tag type='dark' scale={0.8}>\n                                    Subscribers\n                                  </Tag>\n                                </Badge.Anchor>\n                              </div>\n                            </div>\n                            <div className='writer-address-did'>\n                              <div className='writer-did'>\n                                <Snippet symbol='DID' text={writer.did} width='400px' copy='prevent' />\n                              </div>\n                              <div className='writer-address'>\n                                <Snippet type='lite' symbol='Address' text={writer.address} width='400px' />\n                              </div>\n                            </div>\n                            <div className='view-profile'>\n                              <Link href={'#'} icon onClick={() => handleShowProfilePage(writer)}>\n                                {writer.address === wallet.address ? 'Your Profile' : 'View Profile'}\n                              </Link>\n                            </div>\n                          </div>\n                        </Card>\n                      );\n                    }\n                  })}\n                </div>\n              </>\n            )}\n          </div>\n        ) : !showWritersPage && showProfilePage && currentProfile !== undefined ? (\n          <div className='profile-content'>\n            <Card\n              key={currentProfile.address}\n              style={{ backgroundColor: currentProfile.address === wallet.address ? '#eef' : '' }}\n              shadow\n              width='100%'\n            >\n              <div className='writer'>\n                <div className='breadcrumbs-writer-card-top-right'>\n                  <div className='breadcrumbs'>\n                    <Breadcrumbs>\n                      <Breadcrumbs.Item href='#' onClick={handleShowWritersPage}>\n                        {currentField}\n                      </Breadcrumbs.Item>\n                      <Breadcrumbs.Item>Writer</Breadcrumbs.Item>\n                    </Breadcrumbs>\n                  </div>\n                  <div className='writer-card-top-right'>\n                    <Badge.Anchor>\n                      <Badge scale={0.8} marginBottom='0' style={{ backgroundColor: 'darkgreen' }}>\n                        {currentProfile.totalSubscribedBy > 1000 ? '1k+' : currentProfile.totalSubscribedBy}\n                      </Badge>\n                      <Tag type='dark' scale={0.9} marginTop='0.3'>\n                        Subscribers\n                      </Tag>\n                    </Badge.Anchor>\n                    {currentProfile.loggedInUserIsSubscribed ===\n                    'owner' ? null : currentProfile.loggedInUserIsSubscribed === 'yes' ? (\n                      <Badge.Anchor>\n                        <Tag style={{ backgroundColor: 'darkgreen', color: 'white' }} scale={0.9}>\n                          Subscribed\n                        </Tag>\n                      </Badge.Anchor>\n                    ) : currentProfile.loggedInUserIsSubscribed === 'no' ? (\n                      <Button\n                        type='secondary'\n                        shadow\n                        auto\n                        className='btn'\n                        onClick={() => handleShowContractPage()}\n                        scale={0.8}\n                      >\n                        Subscribe\n                      </Button>\n                    ) : null}\n                  </div>\n                </div>\n                <div className='writer-details-profile'>\n                  <div className='writer-identicon-profile'>\n                    <div className='writer-identicon'>\n                      <Identicon\n                        string={currentProfile.address}\n                        bg={currentProfile.address === wallet.address ? '#fff' : '#eef'}\n                        size='40'\n                      />\n                    </div>\n                    <div className='writer-basic-profile'>\n                      <div className='writer-name'>\n                        {currentProfile.name ? (\n                          <Text margin='0' b>\n                            {currentProfile.name}\n                          </Text>\n                        ) : (\n                          <Text margin='0'>--</Text>\n                        )}\n                      </div>\n                      <div className='writer-description'>\n                        <Text margin='0'>{currentProfile.description ? currentProfile.description : '--'}</Text>\n                      </div>\n                      <div className='writer-emoji'>\n                        <Text margin='0'>{currentProfile.emoji ? currentProfile.emoji : '--'}</Text>\n                      </div>\n                    </div>\n                  </div>\n                  <div className='writer-address-did'>\n                    <div className='writer-did'>\n                      <Snippet symbol='DID' text={currentProfile.did} width='400px' copy='prevent' />\n                    </div>\n                    <div className='writer-address'>\n                      <Snippet type='lite' symbol='Address' text={currentProfile.address} width='400px' />\n                    </div>\n                  </div>\n                </div>\n                <div className='view-read-contract'>\n                  <Link href={'#'} icon onClick={() => handleShowReadPage(currentProfile)}>\n                    Read Blog\n                  </Link>\n                  {currentProfile.loggedInUserIsSubscribed !== 'owner' ? (\n                    <Link href={'#'} icon onClick={() => handleShowContractPage()}>\n                      Contract\n                    </Link>\n                  ) : null}\n                </div>\n              </div>\n            </Card>\n          </div>\n        ) : !showWritersPage && !showProfilePage && showContractPage && currentProfile !== undefined ? (\n          <div className='contract-content'>\n            <Card key={currentProfile.address} shadow width='100%'>\n              <div className='contract-card-items'>\n                <div className='breadcrumbs'>\n                  <Breadcrumbs>\n                    <Breadcrumbs.Item href='#' onClick={handleShowWritersPage}>\n                      {currentField}\n                    </Breadcrumbs.Item>\n                    <Breadcrumbs.Item href='#' onClick={() => handleShowProfilePage(currentProfile)}>\n                      Writer\n                    </Breadcrumbs.Item>\n                    <Breadcrumbs.Item>Contract</Breadcrumbs.Item>\n                  </Breadcrumbs>\n                </div>\n                <div className='contract-note'>\n                  {currentProfile.loggedInUserIsSubscribed === 'no' ? (\n                    <Note width='fit-content' type='error' label='Note '>\n                      Looks like you are short of{' '}\n                      {currentProfile.writerRequiredNoOfTokensToAccess -\n                        currentProfile.loggedInUserBalanceOfWriterToken}{' '}\n                      {currentProfile.tokenSymbol} Tokens. Mint atleast{' '}\n                      {currentProfile.writerRequiredNoOfTokensToAccess -\n                        currentProfile.loggedInUserBalanceOfWriterToken}{' '}\n                      {currentProfile.tokenSymbol} tokens below to get subscribed to the writer.\n                    </Note>\n                  ) : (\n                    <Note width='fit-content' label='Info '>\n                      Here you can mint {currentProfile.tokenSymbol} tokens to get subscribed to the writer and also\n                      transfer them to other addresses.\n                    </Note>\n                  )}\n                </div>\n                <div className='token-reads-and-writes'>\n                  <div className='token-reads'>\n                    <Description\n                      title='Contract'\n                      content={\n                        !currentProfile.contractAddress ? (\n                          <Spinner />\n                        ) : (\n                          <Link\n                            href={`https://mumbai.polygonscan.com/address/${currentProfile.contractAddress}`}\n                            target={'_blank'}\n                            icon\n                            style={{ color: '#7B3FE4', fontWeight: 'bold' }}\n                          >\n                            Polygonscan\n                          </Link>\n                        )\n                      }\n                    />\n                    <Description\n                      title='Token Name'\n                      content={!currentProfile.tokenName ? <Spinner /> : currentProfile.tokenName}\n                    />\n                    <Description\n                      title='Token Symbol'\n                      content={!currentProfile.tokenSymbol ? <Spinner /> : currentProfile.tokenSymbol}\n                    />\n                    <Description\n                      title='Token Price'\n                      content={!currentProfile.tokenPrice ? <Spinner /> : currentProfile.tokenPrice + ' MATIC'}\n                    />\n                    <Description\n                      title='Min tokens required'\n                      content={\n                        !currentProfile.writerRequiredNoOfTokensToAccess ? (\n                          <Spinner />\n                        ) : (\n                          currentProfile.writerRequiredNoOfTokensToAccess\n                        )\n                      }\n                    />\n                    <Description title='Your Token Balance' content={currentProfile.loggedInUserBalanceOfWriterToken} />\n                  </div>\n                  <div className='token-writes'>\n                    <div className='token-write'>\n                      <Input\n                        clearable\n                        type='secondary'\n                        placeholder='No. of tokens: 1000'\n                        onChange={(e) => setNewMint(e.target.value)}\n                        width='80%'\n                      >\n                        Mint New Tokens\n                      </Input>\n                      {mintBtnLoading ? (\n                        <Button type='secondary' shadow loading className='btn' scale={0.8}>\n                          Mint\n                        </Button>\n                      ) : (\n                        <Button\n                          type='secondary'\n                          shadow\n                          className='btn'\n                          scale={0.8}\n                          onClick={() => mintNewTokens(currentProfile)}\n                        >\n                          Mint\n                        </Button>\n                      )}\n                    </div>\n                    <div className='token-write'>\n                      <Input\n                        clearable\n                        type='secondary'\n                        placeholder='To Address: 0x0'\n                        onChange={(e) => setTransferAddress(e.target.value)}\n                        width='80%'\n                      >\n                        Transfer Tokens\n                      </Input>\n                      <Input\n                        clearable\n                        type='secondary'\n                        placeholder='No.of tokens: 30'\n                        onChange={(e) => setTransferAmount(e.target.value)}\n                        width='80%'\n                      />\n                      {transferBtnLoading ? (\n                        <Button type='secondary' shadow loading className='btn' scale={0.8}>\n                          Transfer\n                        </Button>\n                      ) : (\n                        <Button\n                          type='secondary'\n                          shadow\n                          className='btn'\n                          scale={0.8}\n                          onClick={() => transferTokens(currentProfile)}\n                        >\n                          Transfer\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          </div>\n        ) : !showWritersPage &&\n          !showProfilePage &&\n          !showContractPage &&\n          showReadPage &&\n          currentProfile !== undefined ? (\n          <div className='read-content'>\n            <Card key={currentProfile.address} shadow width='100%'>\n              <div className='read-card-items'>\n                <div className='breadcrumbs'>\n                  <Breadcrumbs>\n                    <Breadcrumbs.Item href='#' onClick={handleShowWritersPage}>\n                      {currentField}\n                    </Breadcrumbs.Item>\n                    <Breadcrumbs.Item href='#' onClick={() => handleShowProfilePage(currentProfile)}>\n                      Writer\n                    </Breadcrumbs.Item>\n                    <Breadcrumbs.Item>Read</Breadcrumbs.Item>\n                  </Breadcrumbs>\n                </div>\n                <div className='read-blog-posts'>\n                  {currentProfileDecryptedPosts.length <= 0 ? (\n                    postsLoading ? (\n                      <Spinner />\n                    ) : showInfo ? (\n                      currentProfile.address === wallet.address ? (\n                        <Note width='fit-content' label='Note '>\n                          You have not published any posts yet! To publish your first post, head over to <b>Write</b>{' '}\n                          section.\n                        </Note>\n                      ) : (\n                        <Note width='fit-content' label='Info '>\n                          Looks like the writer has not published anything yet! Come back again later.\n                        </Note>\n                      )\n                    ) : null\n                  ) : (\n                    currentProfileDecryptedPosts.map((post) => {\n                      return (\n                        <Card key={post.id} shadow width='100%'>\n                          <Card.Content>{convertCleanDataToHTML(post.data.blocks)}</Card.Content>\n                          <Card.Footer>\n                            <Text i>{convertToDate(post.data.time)}</Text>\n                          </Card.Footer>\n                        </Card>\n                      );\n                    })\n                  )}\n                </div>\n              </div>\n            </Card>\n          </div>\n        ) : null}\n      </>\n    );\n  };\n\n  useEffect(() => {\n    async function init() {\n      if (writer !== undefined && users !== undefined) {\n        const writerUsers = users.filter(\n          (user) => user.deployedContractAddress !== '' && user.deployedContractAddress !== ethers.constants.AddressZero\n        );\n\n        const allWriters = await Promise.all(\n          writerUsers.map(async (writerUser) => {\n            const writerData = await ceramic.store.get('writerData', writerUser.did);\n\n            if (writerData !== undefined && writerData !== null) {\n              if (writerData.accessControlConditions !== undefined && writerData.accessControlConditions[0] !== null) {\n                let userData = {\n                  address: writerUser.address,\n                  did: writerUser.did,\n                  contractAddress: writerUser.deployedContractAddress,\n                };\n\n                if (writerUser.address === wallet.address) {\n                  setLoggedInUserIsAWriter(true);\n                }\n\n                if (writerData.encryptedPosts !== undefined && writerData.encryptedPosts[0] !== null) {\n                  userData.encryptedPosts = writerData.encryptedPosts[0];\n                }\n\n                if (writerData.encryptedSymmetricKey !== undefined && writerData.encryptedSymmetricKey[0] !== null) {\n                  userData.encryptedSymmetricKey = writerData.encryptedSymmetricKey[0];\n                }\n\n                userData.accessControlConditions = writerData.accessControlConditions[0];\n\n                const basicProfile = await ceramic.store.get('basicProfile', writerUser.did);\n                if (basicProfile !== undefined && basicProfile !== null) {\n                  userData.name = basicProfile.name;\n                  userData.description = basicProfile.description;\n                  userData.emoji = basicProfile.emoji;\n                }\n\n                const writerERC20 = new ethers.Contract(\n                  writerUser.deployedContractAddress,\n                  contractABI.writerERC20,\n                  wallet.signer\n                );\n                userData.writerERC20 = writerERC20;\n\n                userData.tokenName = await writerERC20.name();\n                userData.tokenSymbol = await writerERC20.symbol();\n                userData.tokenPrice = ethers.utils.formatEther(await writerERC20.getTokenPrice());\n\n                const loggedInUserBalanceOfWriterToken = await writerERC20.balanceOf(wallet.address);\n                userData.loggedInUserBalanceOfWriterToken = Number(loggedInUserBalanceOfWriterToken);\n\n                const writerRequiredNoOfTokensToAccess = writerData.accessControlConditions[0][0].returnValueTest.value;\n                userData.writerRequiredNoOfTokensToAccess = Number(writerRequiredNoOfTokensToAccess);\n\n                if (Number(loggedInUserBalanceOfWriterToken) >= Number(writerRequiredNoOfTokensToAccess)) {\n                  await addSubscriber(writerUser.did, ceramic.did);\n                  if (writerUser.did === ceramic.did) {\n                    userData.loggedInUserIsSubscribed = 'owner';\n                  } else {\n                    userData.loggedInUserIsSubscribed = 'yes';\n                  }\n                } else {\n                  await removeSubscriber(writerUser.did, ceramic.did);\n                  userData.loggedInUserIsSubscribed = 'no';\n                }\n\n                const updatedWriterUser = await getUserByDID(writerUser.did);\n\n                userData.totalSubscribedBy = updatedWriterUser.subscribedBy.length;\n                userData.totalSubscribedTo = updatedWriterUser.subscribedTo.length;\n                userData.subscribedBy = updatedWriterUser.subscribedBy;\n                userData.subscribedTo = updatedWriterUser.subscribedTo;\n\n                return userData;\n              }\n            }\n          })\n        );\n\n        setAllWriters(allWriters);\n\n        const subscribedToWriters = allWriters.filter((writer) =>\n          writer !== undefined ? writer.subscribedBy.includes(ceramic.did) : null\n        );\n        setSubscribedToWriters(subscribedToWriters);\n\n        const myWriting = allWriters.filter((writer) => (writer !== undefined ? writer.did === ceramic.did : null));\n        setMyWriting(myWriting);\n\n        if (myWriting[0]) {\n          const mySubscribers = await Promise.all(\n            myWriting[0].subscribedBy.map(async (did) => {\n              let subscriberData = {\n                did: did,\n              };\n\n              const user = await getUserByDID(did);\n              subscriberData.address = user.address;\n\n              const basicProfile = await ceramic.store.get('basicProfile', did);\n              if (basicProfile !== undefined && basicProfile !== null) {\n                subscriberData.name = basicProfile.name;\n                subscriberData.description = basicProfile.description;\n                subscriberData.emoji = basicProfile.emoji;\n              }\n\n              return subscriberData;\n            })\n          );\n          setMySubscribers(mySubscribers);\n        }\n      }\n    }\n    init();\n  }, [writer, users, currentProfile]);\n\n  return (\n    <div className='writers'>\n      <Fieldset.Group value='All Writers' onChange={handleFieldChange}>\n        <Fieldset label='All Writers' paddingRight='2.6'>\n          {renderWriters(allWriters)}\n        </Fieldset>\n        <Fieldset label='My Subscriptions' paddingRight='2.6'>\n          {subscribedToWriters.length < 1 ? (\n            <Note width='fit-content' label='Info '>\n              You are not subscribed to any writers yet.\n            </Note>\n          ) : (\n            renderWriters(subscribedToWriters)\n          )}\n        </Fieldset>\n        {loggedInUserIsAWriter ? (\n          <Fieldset label='My Subscribers' paddingRight='2.6'>\n            <div className='my-subscribers'>\n              {mySubscribers.length < 1 ? (\n                <Note width='fit-content' label='Info '>\n                  You have zero subscribers.\n                </Note>\n              ) : (\n                <div className='my-subscribers-cards'>\n                  {mySubscribers.map((subscriber) => {\n                    if (subscriber) {\n                      return (\n                        <Card\n                          key={subscriber.address}\n                          type='lite'\n                          style={{ backgroundColor: subscriber.address === wallet.address ? '#eef' : '' }}\n                          shadow\n                          width='100%'\n                        >\n                          <div className='writer'>\n                            <div className='writer-details-all'>\n                              <div className='writer-identicon-profile'>\n                                <div className='writer-identicon'>\n                                  <Identicon\n                                    string={subscriber.address}\n                                    bg={subscriber.address === wallet.address ? '#fff' : '#eef'}\n                                    size='40'\n                                  />\n                                </div>\n                                <div className='writer-basic-profile'>\n                                  <div className='writer-name'>\n                                    {subscriber.name ? (\n                                      <Text margin='0' b>\n                                        {subscriber.name}\n                                      </Text>\n                                    ) : (\n                                      <Text margin='0'>--</Text>\n                                    )}\n                                  </div>\n                                  <div className='writer-description'>\n                                    <Text margin='0'>{subscriber.description ? subscriber.description : '--'}</Text>\n                                  </div>\n                                  <div className='writer-emoji'>\n                                    <Text margin='0'>{subscriber.emoji ? subscriber.emoji : '--'}</Text>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                            <div className='writer-address-did'>\n                              <div className='writer-did'>\n                                <Snippet symbol='DID' text={subscriber.did} width='400px' copy='prevent' />\n                              </div>\n                              <div className='writer-address'>\n                                <Snippet type='lite' symbol='Address' text={subscriber.address} width='400px' />\n                              </div>\n                            </div>\n                          </div>\n                        </Card>\n                      );\n                    }\n                  })}\n                </div>\n              )}\n            </div>\n          </Fieldset>\n        ) : null}\n      </Fieldset.Group>\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport contractABI from '../../contracts/abi.json';\nimport {\n  encryptedPostsBlobToBase64,\n  encryptedPostsBase64ToBlob,\n  encryptPostsWithLit,\n  decryptPostsWithLit,\n} from '../../lib/lit';\nimport { getUserByDID, getUserByAddress, addSubscriber, removeSubscriber } from '../../lib/threadDB';\nimport './style.css';\nimport { Button, Spinner, Note, Description, Input } from '@geist-ui/core';\n\nexport const AccessControl = ({ wallet, ceramic, writer, authSig, user, handleRerender, handleMessage }) => {\n  const [userHasDeployed, setUserHasDeployed] = useState(false);\n  const [userDeployedContractAddress, setUserDeployedContractAddress] = useState('');\n  const [writerERC20, setWriterERC20] = useState();\n  const [userTokenName, setUserTokenName] = useState('');\n  const [userTokenSymbol, setUserTokenSymbol] = useState('');\n  const [minTokenCount, setMinTokenCount] = useState('');\n  const [newMinTokenCount, setNewMinTokenCount] = useState('');\n  const [minTokenCountBtnLoading, setMinTokenCountBtnLoading] = useState(false);\n\n  const setMinNoOfTokensCount = async () => {\n    try {\n      if (!newMinTokenCount) {\n        handleMessage('warning', 'Please enter min no. of tokens.');\n      } else if (Number(newMinTokenCount) === 0) {\n        handleMessage('warning', 'Min no. of tokens required should be atleast 1.');\n      } else {\n        setMinTokenCountBtnLoading(true);\n\n        const unifiedAccessControlConditions = [\n          {\n            contractAddress: userDeployedContractAddress,\n            standardContractType: 'ERC20',\n            chain: 'mumbai',\n            method: 'balanceOf',\n            parameters: [':userAddress'],\n            returnValueTest: {\n              comparator: '>=',\n              value: newMinTokenCount,\n            },\n          },\n          { operator: 'or' },\n          {\n            contractAddress: '',\n            standardContractType: '',\n            chain: 'mumbai',\n            method: '',\n            parameters: [':userAddress'],\n            returnValueTest: {\n              comparator: '=',\n              value: wallet.address,\n            },\n          },\n        ];\n\n        const writerData = await ceramic.store.get('writerData', ceramic.did);\n\n        if (writerData !== undefined && writerData !== null) {\n          if (writerData.accessControlConditions && writerData.encryptedSymmetricKey && writerData.encryptedPosts) {\n            if (\n              writerData.encryptedPosts !== null &&\n              writerData.encryptedPosts[0] &&\n              writerData.encryptedSymmetricKey !== null &&\n              writerData.encryptedSymmetricKey[0] &&\n              writerData.accessControlConditions !== null &&\n              writerData.accessControlConditions[0]\n            ) {\n              const encryptedPostsBlob = encryptedPostsBase64ToBlob(writerData.encryptedPosts[0]);\n              const userDecryptedPosts = await decryptPostsWithLit(\n                encryptedPostsBlob,\n                writerData.encryptedSymmetricKey[0],\n                writerData.accessControlConditions[0],\n                authSig\n              );\n              const decryptedPosts = userDecryptedPosts.decryptedPosts;\n\n              const { encryptedPosts, encryptedSymmetricKey } = await encryptPostsWithLit(\n                decryptedPosts,\n                unifiedAccessControlConditions, // encrypt the posts again with new access control conditions...\n                authSig\n              );\n\n              const encryptedPostsBase64 = await encryptedPostsBlobToBase64(encryptedPosts);\n\n              await ceramic.store.merge('writerData', {\n                encryptedPosts: [encryptedPostsBase64],\n              });\n\n              await ceramic.store.merge('writerData', {\n                encryptedSymmetricKey: [encryptedSymmetricKey],\n              });\n            }\n          }\n        }\n\n        await ceramic.store.merge('writerData', { accessControlConditions: [unifiedAccessControlConditions] });\n\n        // if (user !== undefined) {\n        //   if (user.subscribedBy.length < 1) return;\n\n        //   await Promise.all(\n        //     user.subscribedBy.map(async (subscriberDID) => {\n        //       const subscriber = await getUserByDID(subscriberDID);\n        //       const subscriberBalanceOfWriterToken = await writerERC20.balanceOf(subscriber.address);\n        //       if (Number(subscriberBalanceOfWriterToken) < Number(newMinTokenCount)) {\n        //         await removeSubscriber(ceramic.did, subscriberDID);\n        //       }\n        //     })\n        //   );\n        // }\n\n        handleMessage('success', 'New min no. of tokens required successfully updated.');\n        setMinTokenCountBtnLoading(false);\n\n        setNewMinTokenCount('');\n\n        handleRerender(true);\n      }\n    } catch (e) {\n      console.log(e);\n\n      setMinTokenCountBtnLoading(false);\n      handleMessage('error', e.message);\n    }\n  };\n\n  useEffect(() => {\n    async function init() {\n      if (writer !== undefined) {\n        const userHasDeployed = await writer.getHasWriterDeployed(wallet.address);\n        if (userHasDeployed) {\n          setUserHasDeployed(true);\n\n          const deployedContractAddress = await writer.getWriterDeployedContractAddress(wallet.address);\n          setUserDeployedContractAddress(deployedContractAddress);\n\n          const writerERC20 = new ethers.Contract(deployedContractAddress, contractABI.writerERC20, wallet.signer);\n          setWriterERC20(writerERC20);\n\n          const userTokenName = await writerERC20.name();\n          setUserTokenName(userTokenName);\n\n          const userTokenSymbol = await writerERC20.symbol();\n          setUserTokenSymbol(userTokenSymbol);\n\n          const writerData = await ceramic.store.get('writerData', ceramic.did);\n\n          if (writerData !== undefined && writerData !== null) {\n            const accessControlConditions = writerData.accessControlConditions[0];\n            const minTokenCount = accessControlConditions[0].returnValueTest.value;\n            setMinTokenCount(minTokenCount);\n          } else {\n            setMinTokenCount('not set');\n          }\n        }\n      }\n    }\n    init();\n  }, [writer]);\n\n  return (\n    <div className='access-control-content'>\n      {userHasDeployed ? (\n        <>\n          <Note width='fit-content' label='Info '>\n            Here you can set the minimum no. of your tokens a reader must own in order to read your blog.\n          </Note>\n          <div className='user-access-control-content'>\n            <div className='access-control-reads'>\n              <Description title='Token Name' content={!userTokenName ? <Spinner /> : userTokenName} />\n              <Description title='Token Symbol' content={!userTokenSymbol ? <Spinner /> : userTokenSymbol} />\n              <Description\n                title='Current Min no. Of tokens required'\n                content={!minTokenCount ? <Spinner /> : minTokenCount === 'not set' ? '--' : minTokenCount}\n              />\n            </div>\n            <div className='access-contrl-writes'>\n              <div className='access-contrl-write'>\n                <Input\n                  clearable\n                  type='secondary'\n                  placeholder='No. of tokens: 5'\n                  onChange={(e) => setNewMinTokenCount(e.target.value)}\n                  width='80%'\n                >\n                  Set New Min No. of Tokens Required\n                </Input>\n                {minTokenCountBtnLoading ? (\n                  <Button type='secondary' shadow loading className='btn' scale={0.8}>\n                    Set New Min No. of Tokens\n                  </Button>\n                ) : (\n                  <Button type='secondary' shadow className='btn' auto scale={0.8} onClick={setMinNoOfTokensCount}>\n                    Set New Min No. of Tokens\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n        </>\n      ) : (\n        <>\n          <Note width='fit-content' label='Note '>\n            In order to set access control condition to your blog, you must first deploy an ERC20 contract\n            (WriterERC20). To do that, head over to <b>My Contract</b> section.\n          </Note>\n        </>\n      )}\n    </div>\n  );\n};\n","import { useState, useEffect, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport { web3Modal, connectWallet, disconectWallet } from './utils/wallet';\nimport LitJsSdk from 'lit-js-sdk';\nimport { connectCeramic } from './utils/ceramic';\nimport { connectThreadDB } from './utils/threadDB';\nimport { registerUser, getUserByDID, setUserDeployedContractAddress, getUsers } from './lib/threadDB';\nimport contractABI from './contracts/abi.json';\nimport contractAddress from './contracts/address.json';\nimport logo from './assets/logo/Group 19@3x.png';\nimport './app.css';\nimport { Button, Text, Note, useToasts, Tabs, Loading, Spacer } from '@geist-ui/core';\nimport { Home } from './components/Home';\nimport { Write } from './components/Write';\nimport { MyContract } from './components/MyContract';\nimport { WriterContract } from './components/WriterContract';\nimport { Read } from './components/Read';\nimport { AccessControl } from './components/AccessControl';\n\nconst App = () => {\n  const { setToast } = useToasts({ placement: 'bottomRight', padding: '1rem' });\n  const handleMessage = (type, message) => {\n    setToast({ type: type, text: message, delay: 6000 });\n  };\n\n  const [wallet, setWallet] = useState();\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [ceramic, setCeramic] = useState();\n  const [ceramicConnected, setCeramicConnected] = useState(false);\n  const [threadDBConnected, setThreadDBConnected] = useState(false);\n  const [user, setUser] = useState();\n  const [users, setUsers] = useState();\n  const [writer, setWriter] = useState();\n  const [authSig, setAuthSig] = useState();\n  const [litConnected, setLitConnected] = useState(false);\n  const [rerender, setRerender] = useState(false);\n\n  useEffect(() => {\n    function init() {\n      if (web3Modal.cachedProvider) {\n        connect();\n      }\n    }\n    init();\n  }, [rerender]);\n\n  const handleRerender = (value) => {\n    setRerender(value);\n  };\n\n  const connect = useCallback(async () => {\n    try {\n      const { provider, injectedProvider, signer, address, balance, chainID } = await connectWallet();\n      const wallet = {\n        provider,\n        injectedProvider,\n        signer,\n        address,\n        balance,\n        chainID,\n      };\n      setWallet(wallet);\n      setWalletConnected(true);\n\n      if (wallet.chainID !== 80001) return;\n\n      const { ceramicClient, did, store, basicProfile } = await connectCeramic(provider, address);\n      const ceramic = {\n        client: ceramicClient,\n        did,\n        store,\n        basicProfile,\n      };\n      setCeramic(ceramic);\n      setCeramicConnected(true);\n\n      await connectThreadDB(signer, address);\n      setThreadDBConnected(true);\n\n      const user = await getUserByDID(did);\n      if (!user) {\n        await registerUser(address, did);\n        const user = await getUserByDID(did);\n        setUser(user);\n      }\n      setUser(user);\n\n      const writer = new ethers.Contract(contractAddress.writer, contractABI.writer, signer);\n      setWriter(writer);\n\n      const userHasDeployed = await writer.getHasWriterDeployed(address);\n      if (userHasDeployed) {\n        const deployedContractAddress = await writer.getWriterDeployedContractAddress(address);\n        await setUserDeployedContractAddress(did, deployedContractAddress);\n      }\n\n      const users = await getUsers();\n      setUsers(users);\n\n      // Lit Protocol connection\n      const client = new LitJsSdk.LitNodeClient({ alertWhenUnauthorized: false });\n      await client.connect();\n      window.litNodeClient = client;\n\n      const authSig = await LitJsSdk.checkAndSignAuthMessage({ chain: 'mumbai' });\n      setAuthSig(authSig);\n      setLitConnected(true);\n    } catch (e) {\n      console.log(e);\n\n      if (e.message === 'Textile Auth Expired!' || e.message === 'Bad API key signature') {\n        handleMessage('secondary', 'Textile Auth expired! Reconnect your wallet.');\n\n        const { threadDBDisconnected, walletDisconnected } = await disconectWallet();\n        if (threadDBDisconnected) setThreadDBConnected(false);\n        setCeramicConnected(false);\n        if (walletDisconnected) setWalletConnected(false);\n      } else {\n        console.log(e);\n\n        handleMessage('error', e.message);\n      }\n    }\n  }, []);\n\n  return (\n    <div className='wrapper'>\n      <div className='header'>\n        <div className='heading'>\n          <img className='logo' src={logo} width='130' alt='0xWriter logo' />\n        </div>\n        <div className='connect-buttons'>\n          {!walletConnected ? (\n            <Button type='secondary' shadow scale={0.8} auto onClick={connect}>\n              Connect Wallet\n            </Button>\n          ) : (\n            <>\n              <Button\n                type='secondary'\n                ghost\n                scale={0.8}\n                auto\n                onClick={async () => {\n                  const { threadDBDisconnected, litDisconnected, walletDisconnected } = await disconectWallet();\n                  if (threadDBDisconnected) setThreadDBConnected(false);\n                  setCeramicConnected(false);\n                  if (litDisconnected) setLitConnected(false);\n                  if (walletDisconnected) setWalletConnected(false);\n                }}\n              >\n                Disconnect Wallet\n              </Button>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div className='content'>\n        {!walletConnected ? (\n          <>\n            <Note label={false} type='default' marginTop='1rem'>\n              <Text b>Welcome to 0xWriter 👋</Text>\n              <Text>Connect your wallet to get started!</Text>\n            </Note>\n            <Spacer />\n            <Note>\n              On initial few logins the data might not load or take longer than usual which is mostly because of ceramic\n              stream not loading. If encountered such thing, disconnect and reconnect your wallet along with refreshing the app couple of times. THIS WILL BE FIXED SOON!\n            </Note>\n          </>\n        ) : wallet.chainID !== 80001 ? (\n          <Note width='fit-content' margin='auto' marginTop='1rem' label='Note '>\n            Please connect to Mumbai Testnet.\n          </Note>\n        ) : !ceramicConnected ? (\n          <Loading type='secondary' spaceRatio={2.5} marginTop='1rem'>\n            Connecting to ceramic network\n          </Loading>\n        ) : !threadDBConnected ? (\n          <Loading type='secondary' spaceRatio={2.5} marginTop='1rem'>\n            Connecting to textile threadDB\n          </Loading>\n        ) : !litConnected ? (\n          <Loading type='secondary' spaceRatio={2.5} marginTop='1rem'>\n            Connecting to lit protocol\n          </Loading>\n        ) : (\n          <>\n            <Tabs initialValue='1' hideDivider align='center'>\n              <Tabs.Item label='Home' value='1'>\n                <Spacer h={2} />\n                <Home wallet={wallet} ceramic={ceramic} handleRerender={handleRerender} handleMessage={handleMessage} />\n              </Tabs.Item>\n              <Tabs.Item label='My Contract' value='2'>\n                <Spacer h={2} />\n                <MyContract\n                  wallet={wallet}\n                  ceramic={ceramic}\n                  writer={writer}\n                  handleRerender={handleRerender}\n                  handleMessage={handleMessage}\n                />\n              </Tabs.Item>\n              <Tabs.Item label='Access Control' value='3'>\n                <Spacer h={2} />\n                <AccessControl\n                  wallet={wallet}\n                  ceramic={ceramic}\n                  writer={writer}\n                  authSig={authSig}\n                  user={user}\n                  handleRerender={handleRerender}\n                  handleMessage={handleMessage}\n                />\n              </Tabs.Item>\n              <Tabs.Item label='Write' value='4'>\n                <Spacer h={1} />\n                <Write\n                  wallet={wallet}\n                  ceramic={ceramic}\n                  writer={writer}\n                  authSig={authSig}\n                  handleRerender={handleRerender}\n                  handleMessage={handleMessage}\n                />\n              </Tabs.Item>\n              <Tabs.Item label='Read' value='5'>\n                <Spacer h={2} />\n                <Read\n                  wallet={wallet}\n                  ceramic={ceramic}\n                  writer={writer}\n                  authSig={authSig}\n                  users={users}\n                  handleRerender={handleRerender}\n                  handleMessage={handleMessage}\n                />\n              </Tabs.Item>\n              <Tabs.Item label='0xWriter Contract' value='6'>\n                <Spacer h={2} />\n                <WriterContract\n                  wallet={wallet}\n                  ceramic={ceramic}\n                  writer={writer}\n                  handleRerender={handleRerender}\n                  handleMessage={handleMessage}\n                />\n              </Tabs.Item>\n            </Tabs>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\nwindow.ethereum &&\n  window.ethereum.on('chainChanged', (chainID) => {\n    web3Modal.cachedProvider &&\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n  });\n\nwindow.ethereum &&\n  window.ethereum.on('accountsChanged', async (accounts) => {\n    if (accounts.length === 0) {\n      const credentials = JSON.parse(localStorage.getItem('payload'));\n\n      if (credentials !== null) {\n        localStorage.removeItem('payload');\n      }\n\n      await web3Modal.clearCachedProvider();\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n    }\n    web3Modal.cachedProvider &&\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n  });\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { GeistProvider, CssBaseline } from '@geist-ui/core';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n  <GeistProvider>\n    <CssBaseline />\n    <App />\n  </GeistProvider>\n);\n","const { io } = require('socket.io-client');\n\nexport const solveChallenge = (identity) => {\n  return new Promise((resolve, reject) => {\n    const socket = io(process.env.REACT_APP_SERVER_URL);\n\n    socket.on('connect', () => {\n      const publicKey = identity.public.toString();\n\n      socket.emit(\n        'initializeAuthentication',\n        JSON.stringify({\n          type: 'token',\n          publicKey,\n        })\n      );\n\n      socket.on('initializeAuthenticationResponse', async (responseData) => {\n        const data = JSON.parse(responseData);\n\n        switch (data.type) {\n          case 'error': {\n            reject(data.value);\n            break;\n          }\n\n          case 'challenge': {\n            const challenge = Buffer.from(data.value);\n            const signature = await identity.sign(challenge);\n            socket.emit('challengeResponse', signature);\n            break;\n          }\n\n          case 'token': {\n            resolve(data.value);\n            socket.disconnect();\n            break;\n          }\n\n          default: {\n            reject(data.value);\n            break;\n          }\n        }\n      });\n    });\n  });\n};\n","import LitJsSdk from 'lit-js-sdk';\n\nconst base64StringToUint8Array = (base64String) => {\n  return new Uint8Array(Buffer.from(base64String, 'base64'));\n};\n\nexport const encryptedPostsBlobToBase64 = async (encryptedPostsBlob) => {\n  return new Promise(function (resolve, _) {\n    let reader = new FileReader();\n    reader.onloadend = function () {\n      return resolve(reader.result.replace('data:application/octet-stream;base64,', ''));\n    };\n    reader.readAsDataURL(encryptedPostsBlob);\n  });\n};\n\nexport const encryptedPostsBase64ToBlob = (encryptedPostsBase64String) => {\n  const encryptedPostsUint8Array = (0, base64StringToUint8Array)(encryptedPostsBase64String);\n\n  const encryptedPostsBlob = new Blob([encryptedPostsUint8Array], { type: 'application/octet-stream' });\n\n  return encryptedPostsBlob;\n};\n\nexport const encryptPostsWithLit = async (posts, accessControlConditions, authSig) => {\n  try {\n    const { encryptedString, symmetricKey } = await LitJsSdk.encryptString(posts);\n\n    const encryptedSymmetricKey = await window.litNodeClient.saveEncryptionKey({\n      accessControlConditions,\n      symmetricKey,\n      authSig,\n      chain: 'mumbai',\n    });\n\n    return {\n      encryptedPosts: encryptedString,\n      encryptedSymmetricKey: LitJsSdk.uint8arrayToString(encryptedSymmetricKey, 'base16'),\n    };\n  } catch (e) {\n    console.log(e);\n\n    throw new Error(e.message);\n  }\n};\n\nexport const decryptPostsWithLit = async (encryptedPosts, encryptedSymmetricKey, accessControlConditions, authSig) => {\n  try {\n    const symmetricKey = await window.litNodeClient.getEncryptionKey({\n      accessControlConditions,\n      toDecrypt: encryptedSymmetricKey,\n      chain: 'mumbai',\n      authSig,\n    });\n\n    const decryptedPosts = await LitJsSdk.decryptString(encryptedPosts, symmetricKey);\n\n    return { decryptedPosts };\n  } catch (e) {\n    console.log(e);\n\n    throw new Error(e.errorCode);\n  }\n};\n"],"sourceRoot":""}